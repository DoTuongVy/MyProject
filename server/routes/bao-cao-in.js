    const express = require('express');
const router = express.Router();
const { db } = require('../db');

// H√†m l√†m tr√≤n theo y√™u c·∫ßu
function customRound(num, digits = 0) {
    if (isNaN(num)) return 0;
    
    console.log(`üîç customRound input: ${num}, digits: ${digits}`);
    
    // Chuy·ªÉn sang s·ªë nguy√™n ƒë·ªÉ tr√°nh l·ªói floating point
    const multiplier = Math.pow(10, digits);
    console.log(`üîç multiplier: ${multiplier}`);
    
    const shifted = num * multiplier;
    console.log(`üîç shifted: ${shifted}`);
    
    let result;
    // D√πng Math.round thay v√¨ Math.floor/Math.ceil ph·ª©c t·∫°p
    result = Math.round(shifted) / multiplier;
    
    console.log(`üîç customRound result: ${result}`);
    return result;
}


// ===== TH√äM M·ªöI: H√ÄM L√ÄM TR√íN L√äN CHO S·ªê T·∫§M THAM CHI·∫æU =====
function roundUp(num) {
    if (isNaN(num)) return 0;
    
    const numValue = parseFloat(num);
    if (isNaN(numValue)) return 0;
    
    console.log(`üîç roundUp input: ${numValue} -> result: ${Math.ceil(numValue)}`);
    return Math.ceil(numValue); // L√†m tr√≤n l√™n: 2.2 -> 3, 2.8 -> 3
}

// H√†m t√≠nh s·ªë tu·∫ßn trong th√°ng
function calculateWeekInMonth(dateString) {
    const date = new Date(dateString);
    const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    
    // L·∫•y s·ªë tu·∫ßn trong nƒÉm
    const getWeekNumber = (d) => {
        const firstDayOfYear = new Date(d.getFullYear(), 0, 1);
        const pastDaysOfYear = (d - firstDayOfYear) / 86400000;
        return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
    };
    
    const weekOfDate = getWeekNumber(date);
    const weekOfFirstDay = getWeekNumber(firstDayOfMonth);
    
    return weekOfDate - weekOfFirstDay + 1;
}


// H√†m t√≠nh s·ªë l·∫ßn ch·∫°y
async function calculateSoLanChay(ws, tuychon, existingReports) {
    if (!ws || ws.trim() === '') return '';
    
    // N·∫øu ch·ªçn "In d·∫∑m" (4) ho·∫∑c "In d·∫∑m + C√°n b√≥ng" (5) th√¨ s·ªë l·∫ßn ch·∫°y l√† 0
    if (tuychon === '4' || tuychon === '5') {
        return 0;
    }
    
    // ƒê·∫øm c√°c b√°o c√°o c√≥ c√πng WS v√† t√πy ch·ªçn (chuy·ªÉn sang text ƒë·ªÉ so s√°nh)
    const samePairs = existingReports.filter(report => 
        report.ws === ws && report.tuy_chon === tuychon
    );
    
    return samePairs.length + 1;
}

// API l·∫•y danh s√°ch b√°o c√°o In
router.get('/list', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const dateFilter = req.query.date;
    const excludeStopOnly = req.query.exclude_stop_only;
    let query = `SELECT * FROM bao_cao_in`;
    let params = [];
    let conditions = [];
    
    if (dateFilter) {
        conditions.push(`DATE(created_at) = ?`);
        params.push(dateFilter);
    }
    
    if (excludeStopOnly === 'true') {
        conditions.push(`(ws IS NOT NULL AND ws != '')`);
    }
    
    if (conditions.length > 0) {
        query += ` WHERE ` + conditions.join(' AND ');
    }

    query += ` ORDER BY created_at DESC, stt DESC`;

    db.all(query, params, (err, rows) => {
        if (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch b√°o c√°o In:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch b√°o c√°o In' });
        }
        res.json(rows || []);
    });
});

// API g·ª≠i b√°o c√°o In ho√†n ch·ªânh
router.post('/submit', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const reportData = req.body;
    if (!reportData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const batDau = reportData.batDau || {};
        const ketThuc = reportData.ketThuc || {};
        const nguoiDung = reportData.nguoiDung || {};
        const date = new Date().toISOString().slice(0, 10);

        // T√≠nh ng√†y ph·ª• d·ª±a tr√™n th·ªùi gian k·∫øt th√∫c
        let ngayPhu = currentReport.ngay;
        if (ketThuc.thoiGianKetThuc) {
            try {
                const endTime = new Date(ketThuc.thoiGianKetThuc);
                const hours = endTime.getHours();
                const minutes = endTime.getMinutes();
                
                // N·∫øu k·∫øt th√∫c t·ª´ 0h ƒë·∫øn 6h10 th√¨ ng√†y ph·ª• = ng√†y - 1
                if (hours < 6 || (hours === 6 && minutes <= 10)) {
                    const ngayPhuDate = new Date(currentReport.ngay);
                    ngayPhuDate.setDate(ngayPhuDate.getDate() - 1);
                    ngayPhu = ngayPhuDate.toISOString().slice(0, 10);
                } else {
                    // C√≤n l·∫°i ng√†y ph·ª• = ng√†y
                    ngayPhu = currentReport.ngay;
                }
            } catch (error) {
                console.error('L·ªói khi t√≠nh ng√†y ph·ª•:', error);
            }
        }

        // L·∫•y STT m·ªõi nh·∫•t
        const sttRow = await new Promise((resolve, reject) => {
            db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in`, [], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        const stt = (sttRow?.max_stt || 0) + 1;

        // L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
        // const existingReports = await new Promise((resolve, reject) => {
        //     db.all(`SELECT ws, tuy_chon FROM bao_cao_in WHERE ws IS NOT NULL`, [], (err, rows) => {
        //         if (err) reject(err);
        //         else resolve(rows || []);
        //     });
        // });


        // T√≠nh s·ªë l·∫ßn ch·∫°y
const soLanChay = await calculateSoLanChay(batDau.ws, batDau.tuychon, existingReports);

        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng
        let wsData = {};
        if (batDau.ws && batDau.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [batDau.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || '',
                        slGiayTheoWS: wsRow.sl_giay_can_cat || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // T√≠nh tu·∫ßn trong th√°ng
        const tuan = calculateWeekInMonth(date);

        // T√≠nh c√°c ch√™nh l·ªách
        const tongSoLuong = parseFloat(ketThuc.tongSoLuong || '0');
        const tongPheLieu = parseFloat(ketThuc.tongPheLieu || '0');
        const tongPhelieuTrang = parseFloat(ketThuc.tongPhelieuTrang || '0');
        const slGiayTheoWS = parseFloat(wsData.slGiayTheoWS || '0');
        
        const chenhLechTTWS = (tongSoLuong + tongPheLieu + tongPhelieuTrang) - slGiayTheoWS;

        // X·ª≠ l√Ω s·ªë pass in
        let soPassIn = batDau.soPassIn || '';
        if (wsData.soMau) {
            const soDau = parseInt(wsData.soMau.split('-')[0] || '0');
            if (soDau <= 6) {
                soPassIn = 'IN 1 PASS';
            } else if (batDau.may === '2M') {
                soPassIn = 'IN 1 PASS';
            }
            // N·∫øu > 6 v√† kh√¥ng ph·∫£i m√°y 2M th√¨ ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
        }

        // L∆∞u v√†o database
        const insertSQL = `INSERT INTO bao_cao_in (
            id, stt, ngay, may, quan_doc, ca, truong_may, ws, so_lan_chay, ngay_phu,
            khach_hang, ma_sp, sl_don_hang, so_con, so_mau, ma_giay_1, ma_giay_2, ma_giay_3,
            kho, dai_giay, tuy_chon, mau_3_tone, sl_giay_tt_1, sl_giay_tt_2, sl_giay_tt_3,
            so_kem, mat_sau, phu_keo, phun_bot, thoi_gian_canh_may, thoi_gian_bat_dau,
            thoi_gian_ket_thuc, thanh_pham_in, phe_lieu, phe_lieu_trang, ghi_chu,
            tong_so_luong, tong_phe_lieu, tong_phe_lieu_trang, sl_giay_ream, tuan,
            gio_lam_viec, ma_ca, sl_giay_theo_ws, sl_cat, chenh_lech_tt_ws, chenh_lech_tt_scc,
            phu_may_1, phu_may_2, so_pass_in, dung_may, nguoi_thuc_hien, user_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
        
        await new Promise((resolve, reject) => {
            db.run(insertSQL, [
                reportId, stt, date,
                batDau.may || '',
                batDau.quanDoc || '',
                batDau.ca || '',
                batDau.truongMay || '',
                batDau.ws || '',
                soLanChay,
                ngayPhu,
                wsData.khachHang,
                wsData.maSP,
                wsData.slDonHang,
                wsData.soCon,
                wsData.soMau,
                wsData.maGiay1,
                wsData.maGiay2,
                wsData.maGiay3,
                wsData.kho,
                wsData.daiGiay,
                batDau.tuychon || '',
                batDau.mau3tone || '',
                ketThuc.slGiayTT1 || '',
                ketThuc.slGiayTT2 || '',
                ketThuc.slGiayTT3 || '',
                parseInt(batDau.sokem || '0'),
                batDau.matsau || '',
                batDau.phukeo || '',
                parseInt(batDau.phunbot || '0'),
                ketThuc.canhmay || '',
                batDau.thoiGianBatDau || '',
                ketThuc.thoiGianKetThuc || '',
                ketThuc.thanhphamin || '',
                ketThuc.phelieu || '',
                ketThuc.phelieutrang || '',
                ketThuc.ghiChu || '',
                ketThuc.tongSoLuong || '',
                ketThuc.tongPheLieu || '',
                ketThuc.tongPhelieuTrang || '',
                ketThuc.slGiayReam || '',
                tuan,
                batDau.gioLamViec || '',
                batDau.maCa || '',
                wsData.slGiayTheoWS,
                '', // sl_cat ƒë·ªÉ tr·ªëng
                chenhLechTTWS.toString(),
                '', // chenh_lech_tt_scc ƒë·ªÉ tr·ªëng
                batDau.phumay1 || '',
                batDau.phumay2 || '',
                soPassIn,
                ketThuc.dungMay ? 1 : 0,
                batDau.nguoiThucHien || '',
                nguoiDung.id || ''
            ], function (err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });

        // X·ª≠ l√Ω b√°o c√°o d·ª´ng m√°y n·∫øu c√≥
        if (reportData.dungMay && Array.isArray(reportData.dungMay)) {
            const stopReports = reportData.dungMay;
            const stopSttRow = await new Promise((resolve, reject) => {
                db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, row) => {
                    if (err) {
                        console.warn('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
                        resolve({ max_stt: 0 });
                    } else {
                        resolve(row);
                    }
                });
            });

            const baseStopStt = (stopSttRow?.max_stt || 0);

            const insertPromises = stopReports.map((stopReport, index) => {
                return new Promise((resolve, reject) => {
                    const stopId = Date.now().toString() + index;
                    const stopStt = baseStopStt + index + 1;

                    db.run(`INSERT INTO bao_cao_in_dung_may (
                        id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, ws, may,
                        thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ly_do,
                        ghi_chu, ngay_thang_nam, tuan, ngay
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            stopId, reportId, stopStt,
                            batDau.ca || '',
                            batDau.gioLamViec || '',
                            batDau.maCa || '',
                            batDau.truongMay || '',
                            batDau.ws || '',
                            batDau.may || '',
                            stopReport.thoiGianDung || '',
                            stopReport.thoiGianChayLai || '',
                            stopReport.thoiGianDungMay || '',
                            stopReport.lyDo || '',
                            stopReport.ghiChu || ketThuc.ghiChu || '',
                            date,
                            tuan,
                            date
                        ], function (err) {
                            if (err) {
                                console.error('L·ªói khi l∆∞u l√Ω do d·ª´ng m√°y:', err.message);
                                reject(err);
                            } else {
                                resolve();
                            }
                        });
                });
            });

            await Promise.all(insertPromises);
        }

        res.json({
            success: true,
            id: reportId,
            message: 'ƒê√£ l∆∞u b√°o c√°o In th√†nh c√¥ng',
            data: {
                so_lan_chay: soLanChay,
                ws_data: wsData,
                tuan: tuan
            }
        });

    } catch (error) {
        console.error('L·ªói khi g·ª≠i b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi g·ª≠i b√°o c√°o In: ' + error.message
        });
    }
});

// API g·ª≠i b√°o c√°o In ph·∫ßn b·∫Øt ƒë·∫ßu
router.post('/submit-start', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const startData = req.body;
    if (!startData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const date = new Date().toISOString().slice(0, 10);

        // L·∫•y STT m·ªõi nh·∫•t
        const sttRow = await new Promise((resolve, reject) => {
            db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in`, [], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        const stt = (sttRow?.max_stt || 0) + 1;

        // L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
const existingReports = await new Promise((resolve, reject) => {
    db.all(`SELECT ws, tuy_chon FROM bao_cao_in WHERE ws IS NOT NULL AND ws != ''`, [], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
    });
});

// T√≠nh s·ªë l·∫ßn ch·∫°y
const soLanChay = await calculateSoLanChay(startData.ws, startData.tuychon, existingReports);

        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng
        let wsData = {};
        if (startData.ws && startData.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [startData.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || '',
                        slGiayTheoWS: wsRow.sl_giay_can_cat || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // L∆∞u v√†o database (ch·ªâ ph·∫ßn b·∫Øt ƒë·∫ßu)
        const insertSQL = `INSERT INTO bao_cao_in (
            id, stt, ngay, may, quan_doc, ca, truong_may, ws, so_lan_chay, khach_hang, ma_sp,
            sl_don_hang, so_con, so_mau, ma_giay_1, ma_giay_2, ma_giay_3, kho, dai_giay,
            tuy_chon, mau_3_tone, so_kem, mat_sau, phu_keo, phun_bot, gio_lam_viec,
            ma_ca, phu_may_1, phu_may_2, so_pass_in, thoi_gian_bat_dau, nguoi_thuc_hien, is_started_only, sl_giay_theo_ws
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
        
        await new Promise((resolve, reject) => {
            db.run(insertSQL, [
                reportId, stt, date,
                startData.may || '',
                startData.quanDoc || '',
                startData.ca || '',
                startData.truongMay || '',
                startData.ws || '',
                soLanChay,
                wsData.khachHang,
                wsData.maSP,
                wsData.slDonHang,
                wsData.soCon,
                wsData.soMau,
                wsData.maGiay1,
                wsData.maGiay2,
                wsData.maGiay3,
                wsData.kho,
                wsData.daiGiay,
                startData.tuychon || '',
                startData.mau3tone || '',
                parseInt(startData.sokem || '0'),
                startData.matsau || '',
                startData.phukeo || '',
                parseInt(startData.phunbot || '0'),
                startData.gioLamViec || '',
                startData.maCa || '',
                startData.phumay1 || '',
                startData.phumay2 || '',
                startData.soPassIn || '',
                startData.thoiGianBatDau || '',
                startData.nguoiThucHien || '',
                1,  // ƒê√°nh d·∫•u l√† ch·ªâ m·ªõi b·∫Øt ƒë·∫ßu
                wsData.slGiayTheoWS || ''
            ], function (err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });

        res.json({
            success: true,
            id: reportId,
            message: 'ƒê√£ l∆∞u b√°o c√°o In b·∫Øt ƒë·∫ßu th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('L·ªói khi g·ª≠i b√°o c√°o In b·∫Øt ƒë·∫ßu:', error);
        res.status(500).json({ 
            error: 'L·ªói khi g·ª≠i b√°o c√°o In b·∫Øt ƒë·∫ßu: ' + error.message
        });
    }
});



// API c·∫≠p nh·∫≠t b√°o c√°o In ph·∫ßn b·∫Øt ƒë·∫ßu
router.put('/update-start/:id', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { id } = req.params;
    const startData = req.body;
    
    if (!id || !startData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá' });
    }
    
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng n·∫øu c√≥ thay ƒë·ªïi WS
        let wsData = {};
        if (startData.ws && startData.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [startData.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // C·∫≠p nh·∫≠t database
        const updateSQL = `UPDATE bao_cao_in SET 
    quan_doc = ?, ca = ?, truong_may = ?, ws = ?, khach_hang = ?, ma_sp = ?,
    sl_don_hang = ?, so_con = ?, so_mau = ?, ma_giay_1 = ?, ma_giay_2 = ?, ma_giay_3 = ?, 
    kho = ?, dai_giay = ?, tuy_chon = ?, mau_3_tone = ?, so_kem = ?, mat_sau = ?, 
    phu_keo = ?, phun_bot = ?, gio_lam_viec = ?, ma_ca = ?, phu_may_1 = ?, phu_may_2 = ?, so_pass_in = ?,
    thoi_gian_bat_dau = ?, nguoi_thuc_hien = ?, sl_giay_theo_ws = ?
    WHERE id = ?`;
        
        await new Promise((resolve, reject) => {
            db.run(updateSQL, [
                startData.quanDoc || '',
                startData.ca || '',
                startData.truongMay || '',
                startData.ws || '',
                wsData.khachHang || '',
                wsData.maSP || '',
                wsData.slDonHang || '',
                wsData.soCon || '',
                wsData.soMau || '',
                wsData.maGiay1 || '',
                wsData.maGiay2 || '',
                wsData.maGiay3 || '',
                wsData.kho || '',
                wsData.daiGiay || '',
                startData.tuychon || '',
                startData.mau3tone || '',
                parseInt(startData.sokem || '0'),
                startData.matsau || '',
                startData.phukeo || '',
                parseInt(startData.phunbot || '0'),
                startData.gioLamViec || '',
                startData.maCa || '',
                startData.phumay1 || '',
                startData.phumay2 || '',
                startData.soPassIn || '',
                startData.thoiGianBatDau || '',
                startData.nguoiThucHien || '',
                wsData.slGiayTheoWS || '', 
                id
            ], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        res.json({
            success: true,
            id: id,
            message: 'ƒê√£ c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In: ' + error.message
        });
    }
});

// API c·∫≠p nh·∫≠t b√°o c√°o In ph·∫ßn k·∫øt th√∫c
router.put('/update-end/:id', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { id } = req.params;
    const { ketThuc, dungMay } = req.body;
    
    if (!id || !ketThuc) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá' });
    }
    
    try {
        // L·∫•y b√°o c√°o hi·ªán t·∫°i
        const currentReport = await new Promise((resolve, reject) => {
            db.get(`SELECT * FROM bao_cao_in WHERE id = ?`, [id], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });
        
        if (!currentReport) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In' });
        }


        // L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
const existingReports = await new Promise((resolve, reject) => {
    db.all(`SELECT ws, tuy_chon FROM bao_cao_in WHERE ws IS NOT NULL AND ws != '' AND id != ?`, [id], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
    });
});

// T√≠nh s·ªë l·∫ßn ch·∫°y
const soLanChay = await calculateSoLanChay(currentReport.ws, currentReport.tuy_chon, existingReports);

        // T√≠nh tu·∫ßn trong th√°ng
        const tuan = calculateWeekInMonth(currentReport.ngay);

        // T√≠nh ng√†y ph·ª• d·ª±a tr√™n th·ªùi gian k·∫øt th√∫c
let ngayPhu = currentReport.ngay;
if (ketThuc.thoiGianKetThuc) {
    try {
        const endTime = new Date(ketThuc.thoiGianKetThuc);
        const hours = endTime.getHours();
        const minutes = endTime.getMinutes();
        
        // N·∫øu k·∫øt th√∫c t·ª´ 0h ƒë·∫øn 6h10 th√¨ ng√†y ph·ª• = ng√†y - 1
        if (hours < 6 || (hours === 6 && minutes <= 10)) {
            const ngayPhuDate = new Date(currentReport.ngay);
            ngayPhuDate.setDate(ngayPhuDate.getDate() - 1);
            ngayPhu = ngayPhuDate.toISOString().slice(0, 10);
        } else {
            // C√≤n l·∫°i ng√†y ph·ª• = ng√†y
            ngayPhu = currentReport.ngay;
        }
    } catch (error) {
        console.error('L·ªói khi t√≠nh ng√†y ph·ª•:', error);
    }
}

        // T√≠nh c√°c ch√™nh l·ªách
        const tongSoLuong = parseFloat(ketThuc.tongSoLuong || '0');
        const tongPheLieu = parseFloat(ketThuc.tongPheLieu || '0');
        const tongPhelieuTrang = parseFloat(ketThuc.tongPhelieuTrang || '0');
        const slGiayTheoWS = parseFloat(currentReport.sl_giay_theo_ws || '0');
        
        const chenhLechTTWS = (tongSoLuong + tongPheLieu + tongPhelieuTrang) - slGiayTheoWS;

        // C·∫≠p nh·∫≠t database
        const updateSQL = `UPDATE bao_cao_in SET 
            thoi_gian_ket_thuc = ?, thoi_gian_canh_may = ?, thanh_pham_in = ?, phe_lieu = ?, 
            phe_lieu_trang = ?, ghi_chu = ?, tong_so_luong = ?, tong_phe_lieu = ?, 
            tong_phe_lieu_trang = ?, sl_giay_ream = ?, tuan = ?, chenh_lech_tt_ws = ?,
            sl_giay_tt_1 = ?, sl_giay_tt_2 = ?, sl_giay_tt_3 = ?, dung_may = ?, is_started_only = ?, ngay_phu = ?, so_lan_chay = ?
            WHERE id = ?`;
        
        await new Promise((resolve, reject) => {
            db.run(updateSQL, [
                ketThuc.thoiGianKetThuc || new Date().toISOString(),
                ketThuc.canhmay || '',
                ketThuc.thanhphamin || '',
                ketThuc.phelieu || '',
                ketThuc.phelieutrang || '',
                ketThuc.ghiChu || '',
                ketThuc.tongSoLuong || '',
                ketThuc.tongPheLieu || '',
                ketThuc.tongPhelieuTrang || '',
                ketThuc.slGiayReam || '',
                tuan,
                chenhLechTTWS.toString(),
                ketThuc.slGiayTT1 || '',
                ketThuc.slGiayTT2 || '',
                ketThuc.slGiayTT3 || '',
                ketThuc.dungMay ? 1 : 0,
                0,  // ƒê√°nh d·∫•u ƒë√£ ho√†n th√†nh
                ngayPhu,
                soLanChay,
                id
            ], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        // X·ª≠ l√Ω b√°o c√°o d·ª´ng m√°y n·∫øu c√≥
        if (dungMay && Array.isArray(dungMay)) {
            const stopSttRow = await new Promise((resolve, reject) => {
                db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, row) => {
                    if (err) {
                        console.warn('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
                        resolve({ max_stt: 0 });
                    } else {
                        resolve(row);
                    }
                });
            });

            const baseStopStt = (stopSttRow?.max_stt || 0);

            const insertPromises = dungMay.map((stopReport, index) => {
                return new Promise((resolve, reject) => {
                    const stopId = Date.now().toString() + index;
                    const stopStt = baseStopStt + index + 1;

                    db.run(`INSERT INTO bao_cao_in_dung_may (
                        id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, ws, may,
                        thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ly_do,
                        ghi_chu, ngay_thang_nam, tuan, ngay
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            stopId, id, stopStt,
                            currentReport.ca || '',
                            currentReport.gio_lam_viec || '',
                            currentReport.ma_ca || '',
                            currentReport.truong_may || '',
                            currentReport.ws || '',
                            currentReport.may || '',
                            stopReport.thoiGianDung || '',
                            stopReport.thoiGianChayLai || '',
                            stopReport.thoiGianDungMay || '',
                            stopReport.lyDo || '',
                            stopReport.ghiChu || ketThuc.ghiChu || '',
                            currentReport.ngay,
                            tuan,
                            currentReport.ngay
                        ], function (err) {
                            if (err) {
                                console.error('L·ªói khi l∆∞u l√Ω do d·ª´ng m√°y:', err.message);
                                reject(err);
                            } else {
                                resolve();
                            }
                        });
                });
            });

            await Promise.all(insertPromises);
        }

        res.json({
            success: true,
            id: id,
            message: 'ƒê√£ c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In: ' + error.message
        });
    }
});

// API l·∫•y chi ti·∫øt b√°o c√°o In
router.get('/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const { id } = req.params;

    db.get(`SELECT * FROM bao_cao_in WHERE id = ?`, [id], (err, report) => {
        if (err) {
            console.error('L·ªói khi l·∫•y chi ti·∫øt b√°o c√°o In:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y chi ti·∫øt b√°o c√°o In' });
        }

        if (!report) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In' });
        }

        // L·∫•y th√¥ng tin d·ª´ng m√°y n·∫øu c√≥
        db.all(`SELECT * FROM bao_cao_in_dung_may WHERE bao_cao_id = ?`, [id], (err, stopReports) => {
            if (err) {
                console.error('L·ªói khi l·∫•y th√¥ng tin d·ª´ng m√°y:', err.message);
                return res.status(500).json({ error: 'L·ªói khi l·∫•y th√¥ng tin d·ª´ng m√°y' });
            }

            report.dungMay = stopReports || [];
            res.json(report);
        });
    });
});

// API x√≥a b√°o c√°o In
router.delete('/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const { id } = req.params;

    // B·∫Øt ƒë·∫ßu transaction
    db.run('BEGIN TRANSACTION', (err) => {
        if (err) {
            console.error('L·ªói khi b·∫Øt ƒë·∫ßu transaction:', err.message);
            return res.status(500).json({ error: 'L·ªói khi b·∫Øt ƒë·∫ßu transaction' });
        }

        // X√≥a c√°c b√°o c√°o d·ª´ng m√°y li√™n quan
        db.run(`DELETE FROM bao_cao_in_dung_may WHERE bao_cao_id = ?`, [id], (err) => {
            if (err) {
                console.error('L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y:', err.message);
                db.run('ROLLBACK');
                return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y' });
            }

            // X√≥a b√°o c√°o ch√≠nh
            db.run(`DELETE FROM bao_cao_in WHERE id = ?`, [id], function (err) {
                if (err) {
                    console.error('L·ªói khi x√≥a b√°o c√°o In:', err.message);
                    db.run('ROLLBACK');
                    return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o In' });
                }

                if (this.changes === 0) {
                    db.run('ROLLBACK');
                    return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In ƒë·ªÉ x√≥a' });
                }

                // Commit transaction
                db.run('COMMIT', (err) => {
                    if (err) {
                        console.error('L·ªói khi commit transaction:', err.message);
                        db.run('ROLLBACK');
                        return res.status(500).json({ error: 'L·ªói khi commit transaction' });
                    }

                    res.json({
                        success: true,
                        message: 'ƒê√£ x√≥a b√°o c√°o In th√†nh c√¥ng'
                    });
                });
            });
        });
    });
});

// API l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y In
router.get('/dung-may/list', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    db.all(`
        SELECT 
            dm.*,
            COALESCE(dm.ca, bci.ca) as ca,
            COALESCE(dm.gio_lam_viec, bci.gio_lam_viec) as gio_lam_viec,
            COALESCE(dm.ma_ca, bci.ma_ca) as ma_ca,
            COALESCE(dm.truong_may, bci.truong_may) as truong_may,
            COALESCE(dm.may, bci.may) as may,
            COALESCE(dm.ws, bci.ws) as ws,
            bci.so_lan_chay
        FROM bao_cao_in_dung_may dm
        LEFT JOIN bao_cao_in bci ON dm.bao_cao_id = bci.id
        ORDER BY dm.created_at DESC
    `, [], (err, rows) => {
        if (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y In:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y In' });
        }

        res.json(rows || []);
    });
});

// API l∆∞u b√°o c√°o d·ª´ng m√°y In ƒë·ªôc l·∫≠p
router.post('/dung-may/submit', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const reportData = req.body;
    if (!reportData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá' });
    }

    // L·∫•y STT m·ªõi nh·∫•t cho b√°o c√°o d·ª´ng m√°y
    db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, sttRow) => {
        if (err) {
            console.error('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y' });
        }

        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const stt = (sttRow?.max_stt || 0) + 1;
        const date = new Date().toISOString().slice(0, 10);
        const tuan = calculateWeekInMonth(date);

        // T·∫°o b√°o c√°o In tr·ªëng ƒë·ªÉ l√†m b√°o c√°o cha
        const inId = Date.now().toString() + Math.random().toString(36).substr(2, 9);

        db.run(`INSERT INTO bao_cao_in (
            id, stt, ca, gio_lam_viec, ma_ca, ngay, may, truong_may, dung_may
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                inId, stt,
                reportData.ca || '',
                reportData.gio_lam_viec || '',
                reportData.ma_ca || '',
                date,
                reportData.may || '',
                reportData.truong_may || '',
                1
            ], function (err) {
                if (err) {
                    console.error('L·ªói khi t·∫°o b√°o c√°o In tr·ªëng:', err.message);
                    return res.status(500).json({ error: 'L·ªói khi t·∫°o b√°o c√°o In tr·ªëng' });
                }
        
                // L∆∞u b√°o c√°o d·ª´ng m√°y
                db.run(`INSERT INTO bao_cao_in_dung_may (
                    id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, may, ws,
                    ly_do, thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ghi_chu,
                    ngay_thang_nam, tuan, ngay
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                    [
                        reportId, inId, stt,
                        reportData.ca || '',
                        reportData.gio_lam_viec || '',
                        reportData.ma_ca || '',
                        reportData.truong_may || '',
                        reportData.may || '',
                        reportData.ws || '',
                        reportData.ly_do || '',
                        reportData.thoi_gian_dung || '',
                        reportData.thoi_gian_chay_lai || '',
                        reportData.thoi_gian_dung_may || '',
                        reportData.ghi_chu || '',
                        date,
                        tuan,
                        date
                    ], function (err) {
                        if (err) {
                            console.error('L·ªói khi l∆∞u b√°o c√°o d·ª´ng m√°y In:', err.message);
                            db.run(`DELETE FROM bao_cao_in WHERE id = ?`, [inId]);
                            return res.status(500).json({ error: 'L·ªói khi l∆∞u b√°o c√°o d·ª´ng m√°y In: ' + err.message });
                        }

                        res.json({
                            success: true,
                            id: reportId,
                            message: 'ƒê√£ l∆∞u b√°o c√°o d·ª´ng m√°y In th√†nh c√¥ng'
                        });
                    });
            });
    });
});

module.exports = router;