    const express = require('express');
const router = express.Router();
const { db } = require('../db');
const nodemailer = require('nodemailer');

// C·∫•u h√¨nh email transporter
const emailTransporter = nodemailer.createTransport({
    service: 'gmail', // ho·∫∑c 'outlook', 'yahoo'
    auth: {
        user: process.env.EMAIL_USER || 'rd04@visingpack.com', // Thay b·∫±ng email c·ªßa b·∫°n
        pass: process.env.EMAIL_PASS || 'aeme fdfg byvv tqns'     // Thay b·∫±ng app password
    }
});

// Danh s√°ch email nh·∫≠n c·∫£nh b√°o
const ALERT_EMAIL_LIST = [
    'tuogvy2604@gmail.com',
    'thien.lam@visingpack.com',
    // 'supervisor@company.com'
    // Th√™m c√°c email c·∫ßn nh·∫≠n c·∫£nh b√°o
];


function parseFormattedNumber(value) {
    if (!value) return '';
    return value.toString().replace(/,/g, '');
}

// H√†m l√†m tr√≤n theo y√™u c·∫ßu
function customRound(num, digits = 0) {
    if (isNaN(num)) return 0;
    
    console.log(`üîç customRound input: ${num}, digits: ${digits}`);
    
    // Chuy·ªÉn sang s·ªë nguy√™n ƒë·ªÉ tr√°nh l·ªói floating point
    const multiplier = Math.pow(10, digits);
    console.log(`üîç multiplier: ${multiplier}`);
    
    const shifted = num * multiplier;
    console.log(`üîç shifted: ${shifted}`);
    
    let result;
    // D√πng Math.round thay v√¨ Math.floor/Math.ceil ph·ª©c t·∫°p
    result = Math.round(shifted) / multiplier;
    
    console.log(`üîç customRound result: ${result}`);
    return result;
}


// ===== TH√äM M·ªöI: H√ÄM L√ÄM TR√íN L√äN CHO S·ªê T·∫§M THAM CHI·∫æU =====
function roundUp(num) {
    if (isNaN(num)) return 0;
    
    const numValue = parseFloat(num);
    if (isNaN(numValue)) return 0;
    
    console.log(`üîç roundUp input: ${numValue} -> result: ${Math.ceil(numValue)}`);
    return Math.ceil(numValue); // L√†m tr√≤n l√™n: 2.2 -> 3, 2.8 -> 3
}

// H√†m t√≠nh s·ªë tu·∫ßn trong th√°ng
function calculateWeekInMonth(dateString) {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = date.getMonth(); // 0-11
    
    // L·∫•y ng√†y ƒë·∫ßu th√°ng
    const firstDayOfMonth = new Date(year, month, 1);
    
    // L·∫•y ng√†y c·ªßa th√°ng hi·ªán t·∫°i
    const dayOfMonth = date.getDate();
    
    // T√≠nh tu·∫ßn th·ª© m·∫•y trong th√°ng (1-6)
    const weekOfMonth = Math.ceil(dayOfMonth / 7);
    
    console.log(`T√≠nh tu·∫ßn: Ng√†y ${dateString} -> Tu·∫ßn ${weekOfMonth} trong th√°ng ${month + 1}/${year}`);
    
    return weekOfMonth;
}








// H√†m t√≠nh t·ªëc ƒë·ªô in (s/h)
function calculatePrintingSpeed(thanhPhamIn, tgChayMayPhut) {
    if (!thanhPhamIn || parseFloat(thanhPhamIn) === 0) return 0;
    if (!tgChayMayPhut || tgChayMayPhut === 0) return 0;
    
    const speed = (parseFloat(thanhPhamIn) * 60) / tgChayMayPhut;
    return Math.round(speed);
}

// H√†m t√≠nh t·ªïng th·ªùi gian d·ª´ng m√°y (ph√∫t)
function calculateTotalStopTimeMinutes(dungMayArray) {
    if (!Array.isArray(dungMayArray) || dungMayArray.length === 0) return 0;
    
    let totalMinutes = 0;
    dungMayArray.forEach(stopReport => {
        if (stopReport.thoiGianDung && stopReport.thoiGianChayLai) {
            try {
                const start = new Date(stopReport.thoiGianDung);
                const end = new Date(stopReport.thoiGianChayLai);
                const diffMinutes = Math.floor((end - start) / (1000 * 60));
                if (diffMinutes > 0) totalMinutes += diffMinutes;
            } catch (error) {
                console.warn('L·ªói t√≠nh th·ªùi gian d·ª´ng m√°y:', error);
            }
        }
    });
    return totalMinutes;
}

// H√†m g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô
async function sendSpeedAlertEmail(reportData, speed, thanhPhamIn, tgChayMayPhut) {
    try {
        let speedText = '';
        let alertType = '';
        
        if (speed === 0) {
            speedText = 'T·ªëc ƒë·ªô = 0 s/h';
            alertType = 'C·∫¢NH B√ÅO: C√≥ th√†nh ph·∫©m nh∆∞ng t·ªëc ƒë·ªô = 0';
        } else {
            speedText = `T·ªëc ƒë·ªô ${speed.toLocaleString()} s/h`;
            alertType = 'C·∫¢NH B√ÅO: V∆∞·ª£t qu√° 12,000 s/h';
        }

        const subject = `${alertType} - WS: ${reportData.ws}`;
        
        const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
            <h2 style="color: #d32f2f; text-align: center;">${alertType}</h2>
            
            <p><strong>Dear Manager,</strong></p>
            <p>H√£y ki·ªÉm tra th√¥ng tin WS d∆∞·ªõi ƒë√¢y:</p>
            
            <!-- Th√¥ng tin ch√≠nh - Layout ngang -->
            <div style="display: table; width: 100%; margin: 20px 0;">
                <div style="display: table-row;">
                    <div style="display: table-cell; width: 50%; vertical-align: top; padding-right: 10px;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="background-color: #e3f2fd;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; width: 40%;">WS:</td>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #1976d2;">${reportData.ws || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">M√°y:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.may || 'N/A'}</td>
                            </tr>
                            <tr style="background-color: #f5f5f5;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">KH:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.khach_hang || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">MSP:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.ma_sp || 'N/A'}</td>
                            </tr>
                            <tr style="background-color: #f5f5f5;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">SL:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.sl_don_hang || 'N/A'}</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">S·ªë m√†u:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.so_mau || 'N/A'}</td>
                            </tr>
                            <tr style="background-color: #e8f5e8;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">Th√†nh ph·∫©m in:</td>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #388e3c;">${thanhPhamIn.toLocaleString()}</td>
                            </tr>
                        </table>
                    </div>
                    
                    <div style="display: table-cell; width: 50%; vertical-align: top; padding-left: 10px;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="background-color: #fff3e0;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; width: 40%;">TG B·∫Øt ƒë·∫ßu:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${formatDateTime(reportData.thoi_gian_bat_dau)}</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">TG K·∫øt th√∫c:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${formatDateTime(reportData.thoi_gian_ket_thuc)}</td>
                            </tr>
                            <tr style="background-color: #f5f5f5;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">TG Ch·∫°y m√°y:</td>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #388e3c;">${tgChayMayPhut} ph√∫t</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">TG Canh m√°y:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.thoi_gian_canh_may || '0'} ph√∫t</td>
                            </tr>
                            <tr style="background-color: #f5f5f5;">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold;">TG D·ª´ng m√°y:</td>
                                <td style="border: 1px solid #ddd; padding: 12px;">${reportData.tg_dung_may || '0'} ph√∫t</td>
                            </tr>
                            <tr style="background-color: ${speed === 0 ? '#ffebee' : speed > 12000 ? '#fff3e0' : '#f5f5f5'};">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #d32f2f;">T·ªëc ƒë·ªô:</td>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #d32f2f;">${speedText}</td>
                            </tr>
                            <tr style="background-color: ${speed === 0 ? '#ffcdd2' : speed > 12000 ? '#ffcc02' : '#f5f5f5'};">
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #d32f2f;">V∆∞·ª£t qu√°:</td>
                                <td style="border: 1px solid #ddd; padding: 12px; font-weight: bold; color: #d32f2f;">
                                    ${speed === 0 ? 'N/A (T·ªëc ƒë·ªô = 0)' : speed > 12000 ? `${(speed - 12000).toLocaleString()} s/h` : 'Trong ti√™u chu·∫©n'}
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            
            <div style="background-color: #ffebee; padding: 20px; border-left: 6px solid #d32f2f; margin: 30px 0; border-radius: 4px;">
                <div style="display: flex; align-items: center; gap: 15px;">
                    <div style="font-size: 32px;">‚ö†Ô∏è</div>
                    <div>
                        <h3 style="margin: 0; color: #d32f2f; font-size: 18px;">C·∫¢NH B√ÅO T·ªêC ƒê·ªò</h3>
                        <p style="margin: 5px 0 0; color: #d32f2f; font-weight: bold; font-size: 16px;">
                            ${speed === 0 ? 'C√≥ th√†nh ph·∫©m in nh∆∞ng t·ªëc ƒë·ªô = 0' : `V∆∞·ª£t qu√° ti√™u chu·∫©n ${(speed - 12000).toLocaleString()} s/h`}
                        </p>
                    </div>
                </div>
            </div>
            
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;">
                <p style="margin: 0; font-size: 16px; color: #495057; line-height: 1.6;">
                    <strong>üéØ Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω ngay l·∫≠p t·ª©c</strong><br>
                    ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng v√† hi·ªáu su·∫•t s·∫£n xu·∫•t.
                </p>
            </div>
            
            <hr style="border: none; border-top: 2px solid #dee2e6; margin: 40px 0;">
            <div style="text-align: center; background-color: #f8f9fa; padding: 20px; border-radius: 8px;">
                <p style="font-size: 14px; color: #6c757d; margin: 0;">
                    <strong>Best regards,</strong><br>
                    ü§ñ H·ªá th·ªëng b√°o c√°o t·ª± ƒë·ªông<br>
                    üìÖ ${new Date().toLocaleString('vi-VN')}
                </p>
            </div>
            
            <!-- Responsive cho mobile -->
            <style>
                @media only screen and (max-width: 600px) {
                    div[style*="display: table"] {
                        display: block !important;
                    }
                    div[style*="display: table-row"] {
                        display: block !important;
                    }
                    div[style*="display: table-cell"] {
                        display: block !important;
                        width: 100% !important;
                        padding: 0 !important;
                        margin-bottom: 20px !important;
                    }
                }
            </style>
        </div>
        `;

        const mailOptions = {
            from: process.env.EMAIL_USER || 'rd04@visingpack.com',
            to: ALERT_EMAIL_LIST.join(','),
            subject: subject,
            html: htmlContent
        };

        const result = await emailTransporter.sendMail(mailOptions);
        
        console.log('‚úÖ ƒê√£ g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô th√†nh c√¥ng:', {
            ws: reportData.ws,
            speed: speed,
            messageId: result.messageId,
            recipients: ALERT_EMAIL_LIST.length
        });
        
        return true;

    } catch (error) {
        console.error('‚ùå L·ªói khi g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô:', error);
        return false;
    }
}

// H√†m format datetime cho email
function formatDateTime(dateString) {
    if (!dateString) return 'N/A';
    try {
        return new Date(dateString).toLocaleString('vi-VN');
    } catch (error) {
        return dateString;
    }
}

// H√†m ki·ªÉm tra v√† g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô
async function checkAndSendSpeedAlert(reportData, thanhPhamIn, tgChayMayPhut) {
    try {
        const speed = calculatePrintingSpeed(thanhPhamIn, tgChayMayPhut);
        
        // ƒêi·ªÅu ki·ªán g·ª≠i email: t·ªëc ƒë·ªô > 12000 ho·∫∑c (t·ªëc ƒë·ªô = 0 v√† c√≥ th√†nh ph·∫©m in > 0)
        const shouldAlert = (speed > 12000) || (speed === 0 && parseFloat(thanhPhamIn) > 0);
        
        if (shouldAlert) {
            console.log('üö® Ph√°t hi·ªán t·ªëc ƒë·ªô b·∫•t th∆∞·ªùng:', {
                ws: reportData.ws,
                speed: speed,
                thanhPhamIn: thanhPhamIn,
                tgChayMayPhut: tgChayMayPhut
            });
            
            // G·ª≠i email c·∫£nh b√°o
            await sendSpeedAlertEmail(reportData, speed, thanhPhamIn, tgChayMayPhut);
        }
        
        return { speed, shouldAlert };
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o t·ªëc ƒë·ªô:', error);
        return { speed: 0, shouldAlert: false };
    }
}





















// H√†m t√≠nh s·ªë l·∫ßn ch·∫°y
async function calculateSoLanChay(ws, tuychonText, existingReports) {
    if (!ws || ws.trim() === '') return '';
    
    console.log(`üîç T√≠nh s·ªë l·∫ßn ch·∫°y: WS=${ws}, T√πy ch·ªçn=${tuychonText}`);
    
    // **B∆Ø·ªöC 1: TH√äM ƒê·∫¶Y ƒê·ª¶ MAP T√ôY CH·ªåN**
    const tuychonValueMap = {
        '1. IN': '1',
        '2. IN + C√ÅN B√ìNG': '2', 
        '3. C√ÅN B√ìNG': '3',
        '4. IN D·∫∂M': '4',
        '5. IN D·∫∂M + C√ÅN B√ìNG': '5',
        '6. C√ÅN B√ìNG L·∫†I': '6',
        '7. IN D·∫∂M (GIA C√îNG)': '7',
        '8. IN D·∫∂M + C√ÅN B√ìNG (GIA C√îNG)': '8',
        '9. C√ÅN B√ìNG L·∫†I (GIA C√îNG)': '9'
    };
    
    const tuychonValue = tuychonValueMap[tuychonText];
    
    // **B∆Ø·ªöC 2: T√ôY CH·ªåN 4,5,6 ‚Üí S·ªê L·∫¶N CH·∫†Y = 0**
    if (['4', '5', '6'].includes(tuychonValue)) {
        console.log(`‚úÖ T√πy ch·ªçn ${tuychonText} -> S·ªë l·∫ßn ch·∫°y = 0`);
        return 0;
    }
    
    // **B∆Ø·ªöC 3: T√ôY CH·ªåN 1,2,3,7,8,9 ‚Üí ƒê·∫æM S·ªê L·∫¶N CH·∫†Y**
const samePairs = existingReports.filter(report => 
    report.ws === ws && report.tuy_chon === tuychonText
);
    
    const soLanChay = samePairs.length + 1;
    console.log(`‚úÖ T√πy ch·ªçn ${tuychonText} -> S·ªë l·∫ßn ch·∫°y = ${soLanChay} (${samePairs.length} b√°o c√°o tr∆∞·ªõc + 1)`);
    
    return soLanChay;
}


// H√†m t√≠nh th√†nh ph·∫©m d·ª±a tr√™n gh√©p c·∫∑p t√πy ch·ªçn
async function calculateThanhPham(currentReportId, wsValue, tuychonText, tongSoLuong) {
    try {
        console.log(`üîç Backend calculateThanhPham: WS=${wsValue}, T√πy ch·ªçn=${tuychonText}, T·ªïng SL=${tongSoLuong}`);
        
        // ƒê∆†N GI·∫¢N: Ch·ªâ tr·∫£ v·ªÅ t·ªïng s·ªë l∆∞·ª£ng, ƒë·ªÉ frontend t√≠nh to√°n chi ti·∫øt
        return parseFloat(tongSoLuong) || 0;
        
    } catch (error) {
        console.error('L·ªói khi t√≠nh th√†nh ph·∫©m:', error);
        return parseFloat(tongSoLuong) || 0;
    }
}



// H√†m c·∫≠p nh·∫≠t l·∫°i th√†nh ph·∫©m c·ªßa T·∫§T C·∫¢ b√°o c√°o production khi c√≥ thay ƒë·ªïi
async function updateRelatedReportsThanhPham(wsValue, tuychonText, currentReportId) {
    try {
        // console.log(`üîç [DEBUG] updateRelatedReportsThanhPham ƒë∆∞·ª£c g·ªçi: WS=${wsValue}, T√πy ch·ªçn=${tuychonText}`);
        
        if (!wsValue) {
            // console.log(`[DEBUG] Kh√¥ng c√≥ WS, b·ªè qua`);
            return;
        }
        
        // LU√îN LU√îN c·∫≠p nh·∫≠t c√°c b√°o c√°o production (1,2,3) b·∫•t k·ªÉ t√πy ch·ªçn hi·ªán t·∫°i l√† g√¨
        // console.log(`[DEBUG] T√¨m ki·∫øm T·∫§T C·∫¢ b√°o c√°o production (1,2,3) c√πng WS ƒë·ªÉ c·∫≠p nh·∫≠t...`);
        
        // T√¨m T·∫§T C·∫¢ b√°o c√°o production (1,2,3) c√πng WS
        const productionReports = await new Promise((resolve, reject) => {
            db.all(`SELECT id, tong_so_luong, mat_sau, phu_keo, so_pass_in, may, tuy_chon, created_at 
                    FROM bao_cao_in 
                    WHERE ws = ? 
                    AND tuy_chon IN ('1. IN', '2. IN + C√ÅN B√ìNG', '3. C√ÅN B√ìNG')
                    AND tong_so_luong IS NOT NULL 
                    AND tong_so_luong != ''
                    AND tong_so_luong != '0'
                    ORDER BY created_at ASC`, 
                [wsValue], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });
        
        // console.log(`[DEBUG] T√¨m th·∫•y ${productionReports.length} b√°o c√°o production:`, 
        //            productionReports.map(r => `ID:${r.id}-${r.tuy_chon}`));
        
        if (productionReports.length === 0) {
            // console.log(`[DEBUG] Kh√¥ng c√≥ b√°o c√°o production n√†o ƒë·ªÉ c·∫≠p nh·∫≠t`);
            return;
        }
        
        // C·∫≠p nh·∫≠t t·ª´ng b√°o c√°o production
        for (const prodReport of productionReports) {
            // console.log(`[DEBUG] X·ª≠ l√Ω b√°o c√°o ID:${prodReport.id} - ${prodReport.tuy_chon}`);
            
            // üîç DEBUG: Tr∆∞·ªõc ti√™n t√¨m T·∫§T C·∫¢ waste reports c√πng WS ƒë·ªÉ xem c√≥ g√¨
// console.log(`[DEBUG] T√¨m T·∫§T C·∫¢ waste reports c√πng WS ${wsValue}...`);
// const allWasteQuery = `SELECT id, phe_lieu, tuy_chon, mat_sau, phu_keo, so_pass_in FROM bao_cao_in 
//                        WHERE ws = ? 
//                        AND tuy_chon IN ('4. IN D·∫∂M', '5. IN D·∫∂M + C√ÅN B√ìNG', '6. C√ÅN B√ìNG L·∫†I')`;

const allWasteReports = await new Promise((resolve, reject) => {
    db.all(allWasteQuery, [wsValue], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
    });
});

// console.log(`[DEBUG] T·∫§T C·∫¢ waste reports c√πng WS:`, allWasteReports.map(w => 
//     `ID:${w.id}-${w.tuy_chon}-PL:${w.phe_lieu}-MatSau:${w.mat_sau}-PhuKeo:${w.phu_keo}-Pass:${w.so_pass_in}`
// ));

// console.log(`[DEBUG] Production report ƒëi·ªÅu ki·ªán:`, {
//     mat_sau: prodReport.mat_sau || 0,
//     phu_keo: prodReport.phu_keo || '',
//     so_pass_in: prodReport.so_pass_in || ''
// });

const wasteReports = allWasteReports.filter(w => {
    const matSauMatch = (w.mat_sau || 0) === (prodReport.mat_sau || 0);
    const passInMatch = (w.so_pass_in || '') === (prodReport.so_pass_in || '');
    const hasPheLieu = w.phe_lieu && w.phe_lieu !== '' && w.phe_lieu !== '0';
    
    // üîß LO·∫†I B·ªé ƒëi·ªÅu ki·ªán ph·ªß keo - waste processes c√≥ th·ªÉ kh√¥ng c√≥ ph·ªß keo
    // const phuKeoMatch = (w.phu_keo || '') === (prodReport.phu_keo || '');
    
    // console.log(`[DEBUG] Waste ID:${w.id} - MatSau:${matSauMatch} Pass:${passInMatch} HasPL:${hasPheLieu} (B·ªè qua PhuKeo)`);
    
    return matSauMatch && passInMatch && hasPheLieu;
});
            
            // console.log(`[DEBUG] T√¨m th·∫•y ${wasteReports.length} waste reports:`, 
            //            wasteReports.map(w => `ID:${w.id}-${w.tuy_chon}-PL:${w.phe_lieu}`));
            
            const totalWastePL = wasteReports.reduce((sum, w) => sum + (parseFloat(w.phe_lieu) || 0), 0);
            // console.log(`[DEBUG] T·ªïng ph·∫ø li·ªáu waste: ${totalWastePL}`);
            
            const tongSoLuong = parseFloat(prodReport.tong_so_luong) || 0;
            const newThanhPham = Math.max(0, tongSoLuong - totalWastePL);
            
            // console.log(`[DEBUG] T√≠nh to√°n: ${tongSoLuong} - ${totalWastePL} = ${newThanhPham}`);
            
            // C·∫≠p nh·∫≠t th√†nh ph·∫©m
            const updateResult = await new Promise((resolve, reject) => {
                db.run(`UPDATE bao_cao_in SET thanh_pham = ? WHERE id = ?`,
                    [newThanhPham.toString(), prodReport.id], function(err) {
                    if (err) {
                        // console.error(`[DEBUG] L·ªói update ID ${prodReport.id}:`, err);
                        reject(err);
                    } else {
                        // console.log(`[DEBUG] Update th√†nh c√¥ng ID ${prodReport.id}: ${this.changes} rows affected`);
                        resolve(this.changes);
                    }
                });
            });
        }
        
        // console.log(`‚úÖ [DEBUG] Ho√†n th√†nh c·∫≠p nh·∫≠t ${productionReports.length} b√°o c√°o production`);
        
    } catch (error) {
        console.error('‚ùå [DEBUG] L·ªói updateRelatedReportsThanhPham:', error);
    }
}


// // T√≠nh th√†nh ph·∫©m cho m·ªôt b√°o c√°o c·ª• th·ªÉ
// async function calculateThanhPhamForReport(reportId, wsValue, tuychonText) {
//     try {
//         // L·∫•y th√¥ng tin b√°o c√°o
//         const report = await new Promise((resolve, reject) => {
//             db.get(`SELECT * FROM bao_cao_in WHERE id = ?`, [reportId], (err, row) => {
//                 if (err) reject(err);
//                 else resolve(row);
//             });
//         });
        
//         if (!report) return 0;
        
//         const tongSoLuong = parseFloat(report.tong_so_luong) || 0;
        
//         // L·∫•y t·ªïng ph·∫ø li·ªáu m·ªõi nh·∫•t t·ª´ waste process t∆∞∆°ng ·ª©ng
//         const wasteMapping = {
//             '1. In': '4. IN D·∫∂M',
//             '2. In + C√ÅN B√ìNG': '5. IN D·∫∂M + C√ÅN B√ìNG',
//             '3. C√ÅN B√ìNG': '6. C√ÅN B√ìNG L·∫†I'
//         };
        
//         const correspondingWaste = wasteMapping[tuychonText];
//         if (!correspondingWaste) return tongSoLuong;
        
//         // T√¨m b√°o c√°o waste m·ªõi nh·∫•t
//         const latestWaste = await new Promise((resolve, reject) => {
//             db.get(`SELECT tong_phe_lieu FROM bao_cao_in 
//                     WHERE ws = ? AND tuy_chon = ? 
//                     AND mat_sau = ? AND phu_keo = ? AND so_pass_in = ? AND may = ?
//                     AND tong_phe_lieu IS NOT NULL 
//                     ORDER BY created_at DESC LIMIT 1`,
//                 [wsValue, correspondingWaste, report.mat_sau || 0, report.phu_keo || '', 
//                  report.so_pass_in || '', report.may || ''], (err, row) => {
//                 if (err) reject(err);
//                 else resolve(row);
//             });
//         });
        
//         if (latestWaste && latestWaste.tong_phe_lieu) {
//             const tongPheLieu = parseFloat(latestWaste.tong_phe_lieu) || 0;
//             return Math.max(0, tongSoLuong - tongPheLieu);
//         }
        
//         return tongSoLuong;
        
//     } catch (error) {
//         console.error('L·ªói khi t√≠nh th√†nh ph·∫©m cho b√°o c√°o:', error);
//         return 0;
//     }
// }




// API c·∫≠p nh·∫≠t c√°c b√°o c√°o li√™n quan
router.post('/update-related-reports', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    try {
        const { ws, tuychonValue } = req.body;
        
        if (!ws || !tuychonValue) {
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin WS ho·∫∑c t√πy ch·ªçn' });
        }
        
        // Map value -> text
        const valueToTextMap = {
            '4': '4. IN D·∫∂M',
            '5': '5. IN D·∫∂M + C√ÅN B√ìNG',
            '6': '6. C√ÅN B√ìNG L·∫†I',
            '7': '7. IN D·∫∂M (GIA C√îNG)',
            '8': '8. IN D·∫∂M + C√ÅN B√ìNG (GIA C√îNG)',
            '9': '9. C√ÅN B√ìNG L·∫†I (GIA C√îNG)'
        };
        
        const tuychonText = valueToTextMap[tuychonValue];
        if (!tuychonText) {
            return res.json({ success: true, message: 'Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t' });
        }
        
        // G·ªçi h√†m c·∫≠p nh·∫≠t
        await updateRelatedReportsThanhPham(ws, tuychonText, null);
        
        res.json({ success: true, message: 'ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o li√™n quan' });
        
    } catch (error) {
        console.error('L·ªói API c·∫≠p nh·∫≠t b√°o c√°o li√™n quan:', error);
        res.status(500).json({ error: 'L·ªói khi c·∫≠p nh·∫≠t b√°o c√°o li√™n quan' });
    }
});




// H√†m t√≠nh t·ªïng v·ªõi c·ªông d·ªìn theo ƒëi·ªÅu ki·ªán chung
async function calculateTongWithSum(fieldName, currentReportId, wsValue, tuychonText, currentReport) {
    try {
        console.log(`üîç Backend t√≠nh t·ªïng ${fieldName}: WS=${wsValue}, T√πy ch·ªçn=${tuychonText}`);
        
        if (!wsValue || !tuychonText || !currentReport) {
            return 0;
        }

        // T√¨m t·∫•t c·∫£ b√°o c√°o c√≥ c√πng ƒëi·ªÅu ki·ªán (tr·ª´ b√°o c√°o hi·ªán t·∫°i)
        const matchingReports = await new Promise((resolve, reject) => {
            db.all(`SELECT ${fieldName}, thanh_pham_in, phe_lieu, phe_lieu_trang FROM bao_cao_in 
                    WHERE ws = ? AND tuy_chon = ? 
                    AND COALESCE(mat_sau, 0) = ? 
                    AND COALESCE(so_pass_in, '') = ? 
                    AND COALESCE(phu_keo, '') = ? 
                    AND id != ? 
                    AND ${fieldName} IS NOT NULL 
                    AND ${fieldName} != ''
                    ORDER BY created_at ASC`, 
                [
                    wsValue, 
                    tuychonText,
                    currentReport.mat_sau || 0,
                    currentReport.so_pass_in || '',
                    currentReport.phu_keo || '',
                    currentReportId
                ], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        // T√≠nh t·ªïng t·ª´ c√°c b√°o c√°o matching
        let tongCu = 0;
        if (matchingReports.length > 0) {
            tongCu = matchingReports.reduce((total, report) => {
                let value = 0;
                if (fieldName === 'thanh_pham_in') {
                    value = parseFloat(report.thanh_pham_in) || 0;
                } else if (fieldName === 'phe_lieu') {
                    value = parseFloat(report.phe_lieu) || 0;
                } else if (fieldName === 'phe_lieu_trang') {
                    value = parseFloat(report.phe_lieu_trang) || 0;
                }
                return total + value;
            }, 0);
        }

        console.log(`‚úÖ Backend t·ªïng ${fieldName} t·ª´ ${matchingReports.length} b√°o c√°o: ${tongCu}`);
        return tongCu;

    } catch (error) {
        console.error(`L·ªói khi t√≠nh t·ªïng ${fieldName}:`, error);
        return 0;
    }
}






// API l·∫•y danh s√°ch b√°o c√°o In
router.get('/list', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const dateFilter = req.query.date;
    const excludeStopOnly = req.query.exclude_stop_only;
    let query = `SELECT * FROM bao_cao_in`;
    let params = [];
    let conditions = [];
    
    if (dateFilter) {
        conditions.push(`DATE(created_at) = ?`);
        params.push(dateFilter);
    }
    
    if (excludeStopOnly === 'true') {
        conditions.push(`(ws IS NOT NULL AND ws != '')`);
    }
    
    if (conditions.length > 0) {
        query += ` WHERE ` + conditions.join(' AND ');
    }

    query += ` ORDER BY created_at DESC, stt DESC`;

    db.all(query, params, (err, rows) => {
        if (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch b√°o c√°o In:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch b√°o c√°o In' });
        }
        res.json(rows || []);
    });
});

// API g·ª≠i b√°o c√°o In ho√†n ch·ªânh
router.post('/submit', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const reportData = req.body;
    if (!reportData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const batDau = reportData.batDau || {};
        const ketThuc = reportData.ketThuc || {};
        const nguoiDung = reportData.nguoiDung || {};
        const date = new Date().toISOString().slice(0, 10);

        // T√≠nh ng√†y ph·ª• d·ª±a tr√™n th·ªùi gian k·∫øt th√∫c
        let ngayPhu = date;
        if (ketThuc.thoiGianKetThuc) {
            try {
                const endTime = new Date(ketThuc.thoiGianKetThuc);
                const hours = endTime.getHours();
                const minutes = endTime.getMinutes();
                
                if (hours < 6 || (hours === 6 && minutes <= 10)) {
                    const ngayPhuDate = new Date(date);
                    ngayPhuDate.setDate(ngayPhuDate.getDate() - 1);
                    ngayPhu = ngayPhuDate.toISOString().slice(0, 10);
                } else {
                    ngayPhu = date;
                }
            } catch (error) {
                console.error('L·ªói khi t√≠nh ng√†y ph·ª•:', error);
            }
        }

        // L·∫•y STT m·ªõi nh·∫•t
        const sttRow = await new Promise((resolve, reject) => {
            db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in`, [], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        const stt = (sttRow?.max_stt || 0) + 1;

        // L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
        const existingReports = await new Promise((resolve, reject) => {
            db.all(`SELECT ws, tuy_chon, tong_phe_lieu FROM bao_cao_in WHERE ws IS NOT NULL AND ws != ''`, [], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        // T√≠nh s·ªë l·∫ßn ch·∫°y
        const soLanChay = await calculateSoLanChay(batDau.ws, batDau.tuychon, existingReports);

        // ‚úÖ NH·∫¨N D·ªÆ LI·ªÜU ƒê√É T√çNH T·ª™ FRONTEND
        const tongSoLuong = ketThuc.tongSoLuong || 0;
        const tongPheLieu = ketThuc.tongPheLieu || 0;
        const tongPheLieuTrang = ketThuc.tongPhelieuTrang || 0;
        const thanhPham = ketThuc.thanhPham || 0;

        console.log(`‚úÖ Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend:`, {
            tongSoLuong,
            tongPheLieu,
            tongPheLieuTrang,
            thanhPham
        });

        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng
        let wsData = {};
        if (batDau.ws && batDau.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [batDau.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || '',
                        slGiayTheoWS: wsRow.sl_giay_can_cat || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // T√≠nh tu·∫ßn trong th√°ng
        const tuan = calculateWeekInMonth(date);

        // T√≠nh c√°c ch√™nh l·ªách
        const slGiayTheoWS = parseFloat(wsData.slGiayTheoWS || '0');
        const chenhLechTTWS = (tongSoLuong + tongPheLieu + tongPheLieuTrang) - slGiayTheoWS;

        // X·ª≠ l√Ω s·ªë pass in
        let soPassIn = batDau.soPassIn || '';
        if (wsData.soMau) {
            const soDau = parseInt(wsData.soMau.split('-')[0] || '0');
            if (soDau <= 6) {
                soPassIn = 'IN 1 PASS';
            } else if (batDau.may === '2M') {
                soPassIn = 'IN 1 PASS';
            }
        }

        // L∆∞u v√†o database
        const insertSQL = `INSERT INTO bao_cao_in (
            id, stt, ngay, may, quan_doc, ca, truong_may, ws, so_lan_chay, ngay_phu,
            khach_hang, ma_sp, sl_don_hang, so_con, so_mau, ma_giay_1, ma_giay_2, ma_giay_3,
            kho, dai_giay, tuy_chon, mau_3_tone, sl_giay_tt_1, sl_giay_tt_2, sl_giay_tt_3,
            so_kem, mat_sau, phu_keo, phun_bot, thoi_gian_canh_may, thoi_gian_bat_dau,
            thoi_gian_ket_thuc, thanh_pham_in, phe_lieu, phe_lieu_trang, ghi_chu,
            tong_so_luong, tong_phe_lieu, tong_phe_lieu_trang, sl_giay_ream, tuan,
            gio_lam_viec, ma_ca, sl_giay_theo_ws, sl_cat, chenh_lech_tt_ws, chenh_lech_tt_scc,
            phu_may_1, phu_may_2, so_pass_in, thanh_pham, dung_may, nguoi_thuc_hien, user_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
        
        await new Promise((resolve, reject) => {
            db.run(insertSQL, [
                reportId, stt, date,
                batDau.may || '',
                batDau.quanDoc || '',
                batDau.ca || '',
                batDau.truongMay || '',
                batDau.ws || '',
                soLanChay,
                ngayPhu,
                wsData.khachHang,
                wsData.maSP,
                wsData.slDonHang,
                wsData.soCon,
                wsData.soMau,
                wsData.maGiay1,
                wsData.maGiay2,
                wsData.maGiay3,
                wsData.kho,
                wsData.daiGiay,
                batDau.tuychon || '',
                batDau.mau3tone || '',
                ketThuc.slGiayTT1 || '',
                ketThuc.slGiayTT2 || '',
                ketThuc.slGiayTT3 || '',
                parseInt(batDau.sokem || '0'),
                batDau.matsau || '',
                batDau.phukeo || '',
                parseInt(batDau.phunbot || '0'),
                ketThuc.canhmay || '',
                batDau.thoiGianBatDau || '',
                ketThuc.thoiGianKetThuc || '',
                ketThuc.thanhphamin || '',
                ketThuc.phelieu || '',
                ketThuc.phelieutrang || '',
                ketThuc.ghiChu || '',
                tongSoLuong.toString(), // ‚úÖ T·ª´ frontend
                tongPheLieu.toString(), // ‚úÖ T·ª´ frontend
                tongPheLieuTrang.toString(), // ‚úÖ T·ª´ frontend
                ketThuc.slGiayReam || '',
                tuan,
                batDau.gioLamViec || '',
                batDau.maCa || '',
                wsData.slGiayTheoWS,
                '', // sl_cat ƒë·ªÉ tr·ªëng
                chenhLechTTWS.toString(),
                '', // chenh_lech_tt_scc ƒë·ªÉ tr·ªëng
                batDau.phumay1 || '',
                batDau.phumay2 || '',
                soPassIn,
                thanhPham.toString(), // ‚úÖ T·ª´ frontend
                ketThuc.dungMay ? 1 : 0,
                batDau.nguoiThucHien || '',
                nguoiDung.id || ''
            ], function (err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });

        // X·ª≠ l√Ω b√°o c√°o d·ª´ng m√°y n·∫øu c√≥
        if (reportData.dungMay && Array.isArray(reportData.dungMay)) {
            const stopReports = reportData.dungMay;
            const stopSttRow = await new Promise((resolve, reject) => {
                db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, row) => {
                    if (err) {
                        console.warn('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
                        resolve({ max_stt: 0 });
                    } else {
                        resolve(row);
                    }
                });
            });

            const baseStopStt = (stopSttRow?.max_stt || 0);

            const insertPromises = stopReports.map((stopReport, index) => {
                return new Promise((resolve, reject) => {
                    const stopId = Date.now().toString() + index;
                    const stopStt = baseStopStt + index + 1;

                    db.run(`INSERT INTO bao_cao_in_dung_may (
                        id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, ws, may,
                        thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ly_do,
                        ghi_chu, ngay_thang_nam, tuan, ngay
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            stopId, reportId, stopStt,
                            batDau.ca || '',
                            batDau.gioLamViec || '',
                            batDau.maCa || '',
                            batDau.truongMay || '',
                            batDau.ws || '',
                            batDau.may || '',
                            stopReport.thoiGianDung || '',
                            stopReport.thoiGianChayLai || '',
                            stopReport.thoiGianDungMay || '',
                            stopReport.lyDo || '',
                            stopReport.ghiChu || ketThuc.ghiChu || '',
                            date,
                            tuan,
                            date
                        ], function (err) {
                            if (err) {
                                console.error('L·ªói khi l∆∞u l√Ω do d·ª´ng m√°y:', err.message);
                                reject(err);
                            } else {
                                resolve();
                            }
                        });
                });
            });

            await Promise.all(insertPromises);



            // Ki·ªÉm tra t·ªëc ƒë·ªô v√† g·ª≠i email c·∫£nh b√°o
try {
    const thanhPhamInValue = parseFloat(ketThuc.thanhphamin || '0');
    
    if (thanhPhamInValue > 0) {
        const tgCanhMay = parseInt(ketThuc.canhmay || '0');
        const tgDungMay = calculateTotalStopTimeMinutes(reportData.dungMay || []);
        
        let tgTongPhut = 0;
        if (batDau.thoiGianBatDau && ketThuc.thoiGianKetThuc) {
            const startTime = new Date(batDau.thoiGianBatDau);
            const endTime = new Date(ketThuc.thoiGianKetThuc);
            tgTongPhut = Math.floor((endTime - startTime) / (1000 * 60));
        }
        
        const tgChayMayPhut = Math.max(0, tgTongPhut - tgCanhMay - tgDungMay);
        
        const alertData = {
            ws: batDau.ws,
            may: batDau.may,
            khach_hang: wsData.khachHang,
            ma_sp: wsData.maSP,
            sl_don_hang: wsData.slDonHang,
            so_mau: wsData.soMau,
            thoi_gian_bat_dau: batDau.thoiGianBatDau,
            thoi_gian_ket_thuc: ketThuc.thoiGianKetThuc,
            thoi_gian_canh_may: tgCanhMay,
            tg_dung_may: tgDungMay
        };
        
        checkAndSendSpeedAlert(alertData, thanhPhamInValue, tgChayMayPhut).catch(error => {
            console.error('L·ªói g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô:', error);
        });
    }
} catch (error) {
    console.error('L·ªói khi ki·ªÉm tra t·ªëc ƒë·ªô:', error);
}



        }

        res.json({
            success: true,
            id: reportId,
            message: 'ƒê√£ l∆∞u b√°o c√°o In th√†nh c√¥ng',
            data: {
                so_lan_chay: soLanChay,
                ws_data: wsData,
                tuan: tuan,
                // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ t√≠nh
                calculations: {
                    tongSoLuong,
                    tongPheLieu,
                    tongPheLieuTrang,
                    thanhPham
                }
            }
        });

    } catch (error) {
        console.error('L·ªói khi g·ª≠i b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi g·ª≠i b√°o c√°o In: ' + error.message
        });
    }
});

// API g·ª≠i b√°o c√°o In ph·∫ßn b·∫Øt ƒë·∫ßu
router.post('/submit-start', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const startData = req.body;
    if (!startData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const date = new Date().toISOString().slice(0, 10);

        // L·∫•y STT m·ªõi nh·∫•t
        const sttRow = await new Promise((resolve, reject) => {
            db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in`, [], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        const stt = (sttRow?.max_stt || 0) + 1;

// L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
const existingReports = await new Promise((resolve, reject) => {
    db.all(`SELECT ws, tuy_chon, tong_phe_lieu FROM bao_cao_in WHERE ws IS NOT NULL AND ws != ''`, [], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
    });
});

// T√≠nh s·ªë l·∫ßn ch·∫°y
const soLanChay = await calculateSoLanChay(startData.ws, startData.tuychon, existingReports);
// T√≠nh th√†nh ph·∫©m (m·∫∑c ƒë·ªãnh = 0 cho ph·∫ßn b·∫Øt ƒë·∫ßu)
const thanhPham = 0;

        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng
        let wsData = {};
        if (startData.ws && startData.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [startData.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || '',
                        slGiayTheoWS: wsRow.sl_giay_can_cat || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // L∆∞u v√†o database (ch·ªâ ph·∫ßn b·∫Øt ƒë·∫ßu)
        const insertSQL = `INSERT INTO bao_cao_in (
            id, stt, ngay, may, quan_doc, ca, truong_may, ws, so_lan_chay, khach_hang, ma_sp,
            sl_don_hang, so_con, so_mau, ma_giay_1, ma_giay_2, ma_giay_3, kho, dai_giay,
            tuy_chon, mau_3_tone, so_kem, mat_sau, phu_keo, phun_bot, gio_lam_viec,
            ma_ca, phu_may_1, phu_may_2, so_pass_in, thanh_pham, thoi_gian_bat_dau, nguoi_thuc_hien, is_started_only, sl_giay_theo_ws, thanh_pham
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
        
        await new Promise((resolve, reject) => {
            db.run(insertSQL, [
                reportId, stt, date,
                startData.may || '',
                startData.quanDoc || '',
                startData.ca || '',
                startData.truongMay || '',
                startData.ws || '',
                soLanChay || 0,
                wsData.khachHang,
                wsData.maSP,
                wsData.slDonHang,
                wsData.soCon,
                wsData.soMau,
                wsData.maGiay1,
                wsData.maGiay2,
                wsData.maGiay3,
                wsData.kho,
                wsData.daiGiay,
                startData.tuychon || '',
                startData.mau3tone || '',
                parseInt(startData.sokem || '0'),
                startData.matsau || '',
                startData.phukeo || '',
                parseInt(startData.phunbot || '0'),
                startData.gioLamViec || '',
                startData.maCa || '',
                startData.phumay1 || '',
                startData.phumay2 || '',
                startData.soPassIn || '',
                thanhPham,
                startData.thoiGianBatDau || '',
                startData.nguoiThucHien || '',
                1,  // ƒê√°nh d·∫•u l√† ch·ªâ m·ªõi b·∫Øt ƒë·∫ßu
                wsData.slGiayTheoWS || '',
                thanhPham
            ], function (err) {
                if (err) reject(err);
                else resolve(this.lastID);
            });
        });



        // Th√™m v√†o danh s√°ch ch·ªù
await new Promise((resolve, reject) => {
    db.run(`INSERT INTO bao_cao_in_cho (
        id, may, ws, quan_doc, ca, gio_lam_viec, ma_ca, truong_may,
        phu_may_1, phu_may_2, tuy_chon, mau_3_tone, so_kem, mat_sau,
        phu_keo, phun_bot, so_pass_in, thoi_gian_bat_dau, nguoi_thuc_hien,
        user_id, bao_cao_chinh_id
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
    [
        reportId + '_cho',
        startData.may || '',
        startData.ws || '',
        startData.quanDoc || '',
        startData.ca || '',
        startData.gioLamViec || '',
        startData.maCa || '',
        startData.truongMay || '',
        startData.phumay1 || '',
        startData.phumay2 || '',
        startData.tuychon || '',
        startData.mau3tone || '',
        parseInt(startData.sokem || '0'),
        startData.matsau || '',
        startData.phukeo || '',
        parseInt(startData.phunbot || '0'),
        startData.soPassIn || '',
        startData.thoiGianBatDau || '',
        startData.nguoiThucHien || '',
        'user_id_placeholder',
        reportId
    ], (err) => {
        if (err) reject(err);
        else resolve();
    });
});



        res.json({
            success: true,
            id: reportId,
            message: 'ƒê√£ l∆∞u b√°o c√°o In b·∫Øt ƒë·∫ßu th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('L·ªói khi g·ª≠i b√°o c√°o In b·∫Øt ƒë·∫ßu:', error);
        res.status(500).json({ 
            error: 'L·ªói khi g·ª≠i b√°o c√°o In b·∫Øt ƒë·∫ßu: ' + error.message
        });
    }
});



// API c·∫≠p nh·∫≠t b√°o c√°o In ph·∫ßn b·∫Øt ƒë·∫ßu
router.put('/update-start/:id', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { id } = req.params;
    const startData = req.body;
    
    if (!id || !startData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá' });
    }
    
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ WS-T·ªïng n·∫øu c√≥ thay ƒë·ªïi WS
        let wsData = {};
        if (startData.ws && startData.ws.trim() !== '') {
            try {
                const wsRow = await new Promise((resolve, reject) => {
                    db.get(`SELECT * FROM ws_tong WHERE so_ws = ?`, [startData.ws], (err, row) => {
                        if (err) reject(err);
                        else resolve(row);
                    });
                });
                
                if (wsRow) {
                    wsData = {
                        khachHang: wsRow.khach_hang || '',
                        maSP: wsRow.ma_sp || '',
                        slDonHang: wsRow.sl_dh || '',
                        soCon: wsRow.s_con || '',
                        soMau: wsRow.so_mau_in || '',
                        maGiay1: wsRow.loai_giay_1 || '',
                        maGiay2: wsRow.loai_giay_2 || '',
                        maGiay3: wsRow.loai_giay_3 || '',
                        kho: wsRow.kho_1 || '',
                        daiGiay: wsRow.chat_1 || ''
                    };
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu WS-T·ªïng:', error);
            }
        }

        // C·∫≠p nh·∫≠t database
        const updateSQL = `UPDATE bao_cao_in SET 
    quan_doc = ?, ca = ?, truong_may = ?, ws = ?, khach_hang = ?, ma_sp = ?,
    sl_don_hang = ?, so_con = ?, so_mau = ?, ma_giay_1 = ?, ma_giay_2 = ?, ma_giay_3 = ?, 
    kho = ?, dai_giay = ?, tuy_chon = ?, mau_3_tone = ?, so_kem = ?, mat_sau = ?, 
    phu_keo = ?, phun_bot = ?, gio_lam_viec = ?, ma_ca = ?, phu_may_1 = ?, phu_may_2 = ?, so_pass_in = ?, thanh_pham = ?,
    thoi_gian_bat_dau = ?, nguoi_thuc_hien = ?, sl_giay_theo_ws = ?
    WHERE id = ?`;
        
        await new Promise((resolve, reject) => {
            db.run(updateSQL, [
                startData.quanDoc || '',
                startData.ca || '',
                startData.truongMay || '',
                startData.ws || '',
                wsData.khachHang || '',
                wsData.maSP || '',
                wsData.slDonHang || '',
                wsData.soCon || '',
                wsData.soMau || '',
                wsData.maGiay1 || '',
                wsData.maGiay2 || '',
                wsData.maGiay3 || '',
                wsData.kho || '',
                wsData.daiGiay || '',
                startData.tuychon || '',
                startData.mau3tone || '',
                parseInt(startData.sokem || '0'),
                startData.matsau || '',
                startData.phukeo || '',
                parseInt(startData.phunbot || '0'),
                startData.gioLamViec || '',
                startData.maCa || '',
                startData.phumay1 || '',
                startData.phumay2 || '',
                startData.soPassIn || '',
                startData.thoiGianBatDau || '',
                startData.nguoiThucHien || '',
                wsData.slGiayTheoWS || '', 
                id
            ], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        res.json({
            success: true,
            id: id,
            message: 'ƒê√£ c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn b·∫Øt ƒë·∫ßu b√°o c√°o In: ' + error.message
        });
    }
});

// API c·∫≠p nh·∫≠t b√°o c√°o In ph·∫ßn k·∫øt th√∫c
router.put('/update-end/:id', async (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { id } = req.params;
    const { ketThuc, dungMay } = req.body;
    
    if (!id || !ketThuc) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá' });
    }
    
    try {
        // L·∫•y b√°o c√°o hi·ªán t·∫°i
        const currentReport = await new Promise((resolve, reject) => {
            db.get(`SELECT * FROM bao_cao_in WHERE id = ?`, [id], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });
        
        if (!currentReport) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In' });
        }

        // L·∫•y danh s√°ch b√°o c√°o hi·ªán c√≥ ƒë·ªÉ t√≠nh s·ªë l·∫ßn ch·∫°y
        const existingReports = await new Promise((resolve, reject) => {
            db.all(`SELECT ws, tuy_chon, tong_phe_lieu FROM bao_cao_in WHERE ws IS NOT NULL AND ws != '' AND id != ?`, [id], (err, rows) => {
                if (err) reject(err);
                else resolve(rows || []);
            });
        });

        // T√≠nh s·ªë l·∫ßn ch·∫°y
        const soLanChay = await calculateSoLanChay(currentReport.ws, currentReport.tuy_chon, existingReports);

        
        // T√≠nh ng√†y ph·ª• d·ª±a tr√™n th·ªùi gian k·∫øt th√∫c
        let ngayPhu = currentReport.ngay;
        if (ketThuc.thoiGianKetThuc) {
            try {
                const endTime = new Date(ketThuc.thoiGianKetThuc);
                const hours = endTime.getHours();
                const minutes = endTime.getMinutes();
                
                if (hours < 6 || (hours === 6 && minutes <= 10)) {
                    const ngayPhuDate = new Date(currentReport.ngay);
                    ngayPhuDate.setDate(ngayPhuDate.getDate() - 1);
                    ngayPhu = ngayPhuDate.toISOString().slice(0, 10);
                } else {
                    ngayPhu = currentReport.ngay;
                }
            } catch (error) {
                console.error('L·ªói khi t√≠nh ng√†y ph·ª•:', error);
            }
        }


        // T√≠nh tu·∫ßn trong th√°ng
        const tuan = calculateWeekInMonth(ngayPhu);

        // ‚úÖ NH·∫¨N D·ªÆ LI·ªÜU ƒê√É T√çNH T·ª™ FRONTEND
        const thanhPhamIn = parseFloat(ketThuc.thanhphamin || '0');
        const tongSoLuong = ketThuc.tongSoLuong || 0;
        const tongPheLieu = ketThuc.tongPheLieu || 0;
        const tongPheLieuTrang = ketThuc.tongPhelieuTrang || 0;
        const thanhPham = ketThuc.thanhPham || 0;

        console.log(`‚úÖ Backend update-end nh·∫≠n d·ªØ li·ªáu t·ª´ frontend:`, {
            thanhPhamIn,
            tongSoLuong,
            tongPheLieu,
            tongPheLieuTrang,
            thanhPham
        });

        const slGiayTheoWS = parseFloat(currentReport.sl_giay_theo_ws || '0');
        const chenhLechTTWS = (tongSoLuong + tongPheLieu + tongPheLieuTrang) - slGiayTheoWS;

        // C·∫≠p nh·∫≠t database
        const updateSQL = `UPDATE bao_cao_in SET 
            thoi_gian_ket_thuc = ?, thoi_gian_canh_may = ?, thanh_pham_in = ?, phe_lieu = ?, 
            phe_lieu_trang = ?, ghi_chu = ?, tong_so_luong = ?, tong_phe_lieu = ?, 
            tong_phe_lieu_trang = ?, sl_giay_ream = ?, tuan = ?, chenh_lech_tt_ws = ?,
            sl_giay_tt_1 = ?, sl_giay_tt_2 = ?, sl_giay_tt_3 = ?, dung_may = ?, is_started_only = ?, ngay_phu = ?, so_lan_chay = ?, thanh_pham = ? 
            WHERE id = ?`;
        
        await new Promise((resolve, reject) => {
            db.run(updateSQL, [
                ketThuc.thoiGianKetThuc || new Date().toISOString(),
                ketThuc.canhmay || '',
                thanhPhamIn.toString(),
                ketThuc.phelieu || '',
                ketThuc.phelieutrang || '',
                ketThuc.ghiChu || '',
                tongSoLuong.toString(), // ‚úÖ T·ª´ frontend
                tongPheLieu.toString(), // ‚úÖ T·ª´ frontend  
                tongPheLieuTrang.toString(), // ‚úÖ T·ª´ frontend
                ketThuc.slGiayReam || '',
                tuan,
                chenhLechTTWS.toString(),
                parseFormattedNumber(ketThuc.slGiayTT1) || '',
parseFormattedNumber(ketThuc.slGiayTT2) || '',
parseFormattedNumber(ketThuc.slGiayTT3) || '',
                ketThuc.dungMay ? 1 : 0,
                0,  // ƒê√°nh d·∫•u ƒë√£ ho√†n th√†nh
                ngayPhu,
                soLanChay || 0,
                thanhPham.toString(), // ‚úÖ T·ª´ frontend
                id
            ], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        // X·ª≠ l√Ω b√°o c√°o d·ª´ng m√°y n·∫øu c√≥
        if (dungMay && Array.isArray(dungMay)) {
            const stopSttRow = await new Promise((resolve, reject) => {
                db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, row) => {
                    if (err) {
                        console.warn('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
                        resolve({ max_stt: 0 });
                    } else {
                        resolve(row);
                    }
                });
            });

            const baseStopStt = (stopSttRow?.max_stt || 0);

            const insertPromises = dungMay.map((stopReport, index) => {
                return new Promise((resolve, reject) => {
                    const stopId = Date.now().toString() + index;
                    const stopStt = baseStopStt + index + 1;

                    db.run(`INSERT INTO bao_cao_in_dung_may (
                        id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, ws, may,
                        thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ly_do,
                        ghi_chu, ngay_thang_nam, tuan, ngay
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                        [
                            stopId, id, stopStt,
                            currentReport.ca || '',
                            currentReport.gio_lam_viec || '',
                            currentReport.ma_ca || '',
                            currentReport.truong_may || '',
                            currentReport.ws || '',
                            currentReport.may || '',
                            stopReport.thoiGianDung || '',
                            stopReport.thoiGianChayLai || '',
                            stopReport.thoiGianDungMay || '',
                            stopReport.lyDo || '',
                            stopReport.ghiChu || ketThuc.ghiChu || '',
                            currentReport.ngay,
                            tuan,
                            currentReport.ngay
                        ], function (err) {
                            if (err) {
                                console.error('L·ªói khi l∆∞u l√Ω do d·ª´ng m√°y:', err.message);
                                reject(err);
                            } else {
                                resolve();
                            }
                        });
                });
            });

            await Promise.all(insertPromises);
        }

        // üîç DEBUG: Lu√¥n g·ªçi c·∫≠p nh·∫≠t cho T·∫§T C·∫¢ b√°o c√°o (kh√¥ng ch·ªâ waste)
console.log(`üîç [DEBUG] update-end g·ªçi updateRelatedReportsThanhPham: WS=${currentReport.ws}, T√πy ch·ªçn=${currentReport.tuy_chon}`);
await updateRelatedReportsThanhPham(currentReport.ws, currentReport.tuy_chon, id);
console.log(`üîç [DEBUG] ƒê√£ ho√†n th√†nh g·ªçi updateRelatedReportsThanhPham`);



// X√≥a kh·ªèi danh s√°ch ch·ªù khi ho√†n th√†nh
await new Promise((resolve, reject) => {
    db.run(`DELETE FROM bao_cao_in_cho WHERE bao_cao_chinh_id = ?`, [id], (err) => {
        if (err) {
            console.warn('Kh√¥ng th·ªÉ x√≥a kh·ªèi danh s√°ch ch·ªù:', err.message);
        }
        resolve(); // Kh√¥ng reject ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng lu·ªìng ch√≠nh
    });
});








// Ki·ªÉm tra t·ªëc ƒë·ªô v√† g·ª≠i email c·∫£nh b√°o
try {
    const thanhPhamInValue = parseFloat(ketThuc.thanhphamin || '0');
    
    if (thanhPhamInValue > 0) {
        const tgCanhMay = parseInt(ketThuc.canhmay || '0');
        const tgDungMay = calculateTotalStopTimeMinutes(dungMay || []);
        
        let tgTongPhut = 0;
        if (currentReport.thoi_gian_bat_dau && ketThuc.thoiGianKetThuc) {
            const startTime = new Date(currentReport.thoi_gian_bat_dau);
            const endTime = new Date(ketThuc.thoiGianKetThuc);
            tgTongPhut = Math.floor((endTime - startTime) / (1000 * 60));
        }
        
        const tgChayMayPhut = Math.max(0, tgTongPhut - tgCanhMay - tgDungMay);
        
        const alertData = {
            ws: currentReport.ws,
            may: currentReport.may,
            khach_hang: currentReport.khach_hang,
            ma_sp: currentReport.ma_sp,
            sl_don_hang: currentReport.sl_don_hang,
            so_mau: currentReport.so_mau,
            thoi_gian_bat_dau: currentReport.thoi_gian_bat_dau,
            thoi_gian_ket_thuc: ketThuc.thoiGianKetThuc,
            thoi_gian_canh_may: tgCanhMay,
            tg_dung_may: tgDungMay
        };
        
        // G·ª≠i email c·∫£nh b√°o (kh√¥ng ch·ªù k·∫øt qu·∫£ ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng response)
        checkAndSendSpeedAlert(alertData, thanhPhamInValue, tgChayMayPhut).catch(error => {
            console.error('L·ªói g·ª≠i email c·∫£nh b√°o t·ªëc ƒë·ªô:', error);
        });
    }
} catch (error) {
    console.error('L·ªói khi ki·ªÉm tra t·ªëc ƒë·ªô:', error);
}





        res.json({
            success: true,
            id: id,
            message: 'ƒê√£ c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In th√†nh c√¥ng',
            data: {
                calculations: {
                    thanhPhamIn,
                    tongSoLuong,
                    tongPheLieu,
                    tongPheLieuTrang,
                    thanhPham
                }
            }
        });

    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In:', error);
        res.status(500).json({ 
            error: 'L·ªói khi c·∫≠p nh·∫≠t ph·∫ßn k·∫øt th√∫c b√°o c√°o In: ' + error.message
        });
    }
});

// API l·∫•y chi ti·∫øt b√°o c√°o In
router.get('/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const { id } = req.params;

    db.get(`SELECT * FROM bao_cao_in WHERE id = ?`, [id], (err, report) => {
        if (err) {
            console.error('L·ªói khi l·∫•y chi ti·∫øt b√°o c√°o In:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y chi ti·∫øt b√°o c√°o In' });
        }

        if (!report) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In' });
        }

        // L·∫•y th√¥ng tin d·ª´ng m√°y n·∫øu c√≥
        db.all(`SELECT * FROM bao_cao_in_dung_may WHERE bao_cao_id = ?`, [id], (err, stopReports) => {
            if (err) {
                console.error('L·ªói khi l·∫•y th√¥ng tin d·ª´ng m√°y:', err.message);
                return res.status(500).json({ error: 'L·ªói khi l·∫•y th√¥ng tin d·ª´ng m√°y' });
            }

            report.dungMay = stopReports || [];
            res.json(report);
        });
    });
});

// API x√≥a b√°o c√°o In
router.delete('/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const { id } = req.params;

    // B·∫Øt ƒë·∫ßu transaction
    db.run('BEGIN TRANSACTION', (err) => {
        if (err) {
            console.error('L·ªói khi b·∫Øt ƒë·∫ßu transaction:', err.message);
            return res.status(500).json({ error: 'L·ªói khi b·∫Øt ƒë·∫ßu transaction' });
        }

        // X√≥a c√°c b√°o c√°o d·ª´ng m√°y li√™n quan
        db.run(`DELETE FROM bao_cao_in_dung_may WHERE bao_cao_id = ?`, [id], (err) => {
            if (err) {
                console.error('L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y:', err.message);
                db.run('ROLLBACK');
                return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y' });
            }

            // X√≥a b√°o c√°o ch√≠nh
            db.run(`DELETE FROM bao_cao_in WHERE id = ?`, [id], function (err) {
                if (err) {
                    console.error('L·ªói khi x√≥a b√°o c√°o In:', err.message);
                    db.run('ROLLBACK');
                    return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o In' });
                }

                if (this.changes === 0) {
                    db.run('ROLLBACK');
                    return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o In ƒë·ªÉ x√≥a' });
                }

                // Commit transaction
                db.run('COMMIT', (err) => {
                    if (err) {
                        console.error('L·ªói khi commit transaction:', err.message);
                        db.run('ROLLBACK');
                        return res.status(500).json({ error: 'L·ªói khi commit transaction' });
                    }

                    res.json({
                        success: true,
                        message: 'ƒê√£ x√≥a b√°o c√°o In th√†nh c√¥ng'
                    });
                });
            });
        });
    });
});


router.delete('/dung-may/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ error: 'ID b√°o c√°o d·ª´ng m√°y kh√¥ng h·ª£p l·ªá' });
    }

    db.run(`DELETE FROM bao_cao_in_dung_may WHERE id = ?`, [id], function (err) {
        if (err) {
            console.error('L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y:', err.message);
            return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o d·ª´ng m√°y' });
        }

        if (this.changes === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o d·ª´ng m√°y ƒë·ªÉ x√≥a' });
        }

        res.json({
            success: true,
            message: 'ƒê√£ x√≥a b√°o c√°o d·ª´ng m√°y th√†nh c√¥ng'
        });
    });
});



// API l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y In
router.get('/dung-may/list', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const dateFilter = req.query.date;
    const machineFilter = req.query.machine;
    
    let query = `
        SELECT 
            dm.*,
            COALESCE(dm.ca, bci.ca) as ca,
            COALESCE(dm.gio_lam_viec, bci.gio_lam_viec) as gio_lam_viec,
            COALESCE(dm.ma_ca, bci.ma_ca) as ma_ca,
            COALESCE(dm.truong_may, bci.truong_may) as truong_may,
            COALESCE(dm.may, bci.may) as may,
            COALESCE(dm.ws, bci.ws) as ws,
            bci.so_lan_chay
        FROM bao_cao_in_dung_may dm
        LEFT JOIN bao_cao_in bci ON dm.bao_cao_id = bci.id
    `;
    
    let params = [];
    let conditions = [];
    
    if (dateFilter) {
        conditions.push(`DATE(dm.ngay) = ?`);
        params.push(dateFilter);
    }
    
    if (machineFilter) {
        conditions.push(`COALESCE(dm.may, bci.may) = ?`);
        params.push(machineFilter);
    }
    
    if (conditions.length > 0) {
        query += ` WHERE ` + conditions.join(' AND ');
    }
    
    query += ` ORDER BY dm.created_at DESC, dm.stt DESC`;

    db.all(query, params, (err, rows) => {
        if (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch b√°o c√°o d·ª´ng m√°y' });
        }
        
        // X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi tr·∫£ v·ªÅ
        const processedRows = (rows || []).map(row => ({
            ...row,
            // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng quan tr·ªçng kh√¥ng null
            ca: row.ca || '',
            gio_lam_viec: row.gio_lam_viec || '',
            ma_ca: row.ma_ca || '',
            truong_may: row.truong_may || '',
            may: row.may || '',
            ws: row.ws || '',
            ly_do: row.ly_do || '',
            thoi_gian_dung_may: row.thoi_gian_dung_may || '0 ph√∫t',
            ghi_chu: row.ghi_chu || ''
        }));
        
        res.json(processedRows);
    });
});

// API l∆∞u b√°o c√°o d·ª´ng m√°y In ƒë·ªôc l·∫≠p
router.post('/dung-may/submit', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    const reportData = req.body;
    if (!reportData) {
        return res.status(400).json({ error: 'D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá' });
    }

    console.log('üì• Nh·∫≠n d·ªØ li·ªáu b√°o c√°o d·ª´ng m√°y:', reportData);

    // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!reportData.ly_do || !reportData.thoi_gian_dung || !reportData.thoi_gian_chay_lai) {
        return res.status(400).json({ 
            error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: l√Ω do, th·ªùi gian d·ª´ng, th·ªùi gian ch·∫°y l·∫°i' 
        });
    }

    // L·∫•y STT m·ªõi nh·∫•t cho b√°o c√°o d·ª´ng m√°y
    db.get(`SELECT MAX(stt) as max_stt FROM bao_cao_in_dung_may`, [], (err, sttRow) => {
        if (err) {
            console.error('L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y STT m·ªõi nh·∫•t cho d·ª´ng m√°y' });
        }

        const reportId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        const stt = (sttRow?.max_stt || 0) + 1;
        const date = new Date().toISOString().slice(0, 10);
        
        // T√≠nh tu·∫ßn trong th√°ng
        const tuan = calculateWeekInMonth(date);

        console.log('üíæ Chu·∫©n b·ªã l∆∞u v·ªõi STT:', stt, 'Tu·∫ßn:', tuan);

        // L∆∞u v√†o database
        db.run(`INSERT INTO bao_cao_in_dung_may (
            id, bao_cao_id, stt, ca, gio_lam_viec, ma_ca, truong_may, may, ws,
            ly_do, thoi_gian_dung, thoi_gian_chay_lai, thoi_gian_dung_may, ghi_chu,
            ngay_thang_nam, tuan, ngay, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
            reportId,
            null, // Kh√¥ng c√≥ b√°o c√°o cha
            stt,
            reportData.ca || '',
            reportData.gio_lam_viec || '',
            reportData.ma_ca || '',
            reportData.truong_may || '',
            reportData.may || '',
            reportData.ws || '', // C√≥ th·ªÉ r·ªóng
            reportData.ly_do || '',
            reportData.thoi_gian_dung || '',
            reportData.thoi_gian_chay_lai || '',
            reportData.thoi_gian_dung_may || '0 ph√∫t',
            reportData.ghi_chu || '',
            date,
            tuan,
            date,
            new Date().toISOString()
        ], function (err) {
            if (err) {
                console.error('L·ªói khi l∆∞u b√°o c√°o d·ª´ng m√°y:', err.message);
                return res.status(500).json({ 
                    error: 'L·ªói khi l∆∞u b√°o c√°o d·ª´ng m√°y: ' + err.message 
                });
            }

            console.log('‚úÖ ƒê√£ l∆∞u b√°o c√°o d·ª´ng m√°y th√†nh c√¥ng v·ªõi ID:', reportId);

            res.json({
                success: true,
                id: reportId,
                stt: stt,
                message: 'ƒê√£ l∆∞u b√°o c√°o d·ª´ng m√°y th√†nh c√¥ng'
            });
        });
    });
});





// API ki·ªÉm tra b√°o c√°o ch·ªù theo m√°y
router.get('/cho/:machineId', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { machineId } = req.params;
    
    db.get(`SELECT * FROM bao_cao_in_cho WHERE may = ? ORDER BY created_at DESC LIMIT 1`, 
        [machineId], (err, row) => {
        if (err) {
            console.error('L·ªói khi ki·ªÉm tra b√°o c√°o ch·ªù:', err.message);
            return res.status(500).json({ error: 'L·ªói khi ki·ªÉm tra b√°o c√°o ch·ªù' });
        }
        
        res.json(row || null);
    });
});

// API l·∫•y danh s√°ch ch·ªù theo m√°y
router.get('/cho/list/:machineId', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { machineId } = req.params;
    
    db.all(`SELECT * FROM bao_cao_in_cho WHERE may = ? ORDER BY created_at DESC`, 
        [machineId], (err, rows) => {
        if (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch ch·ªù:', err.message);
            return res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch ch·ªù' });
        }
        
        res.json(rows || []);
    });
});

// API x√≥a b√°o c√°o kh·ªèi danh s√°ch ch·ªù
router.delete('/cho/:id', (req, res) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    
    const { id } = req.params;
    
    db.run(`DELETE FROM bao_cao_in_cho WHERE id = ?`, [id], function(err) {
        if (err) {
            console.error('L·ªói khi x√≥a b√°o c√°o ch·ªù:', err.message);
            return res.status(500).json({ error: 'L·ªói khi x√≥a b√°o c√°o ch·ªù' });
        }
        
        res.json({ success: true, message: 'ƒê√£ x√≥a b√°o c√°o ch·ªù' });
    });
});




module.exports = router;