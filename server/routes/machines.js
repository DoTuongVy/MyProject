//! =================================================================
//! MACHINES API ROUTES - REAL DATABASE OPERATIONS
//  File: server/routes/machines.js
//  Phi√™n b·∫£n th·ª±c t·∫ø v·ªõi database operations
//! =================================================================

const express = require('express');
const router = express.Router();
const { db } = require('../db');
// const { v4: uuidv4 } = require('uuid');

console.log('üöÄ Machines routes loaded with real database operations');

//TODO L·∫•y danh s√°ch t·∫•t c·∫£ m√°y========================================================================
router.get('/list', async (req, res) => {
    try {
        console.log('üì° GET /machines/list ƒë∆∞·ª£c g·ªçi');
        
        let query = `
            SELECT id, name, location, status, description, department, system_id, module_id,
                   created_at, updated_at 
            FROM machines 
        `;
        
        const params = [];
        const conditions = [];
        
        // L·ªçc theo module_id n·∫øu c√≥
        if (req.query.module_id) {
            conditions.push('module_id = ?');
            params.push(req.query.module_id);
        }
        
        // L·ªçc theo system_id n·∫øu c√≥
        if (req.query.system_id) {
            conditions.push('system_id = ?');
            params.push(req.query.system_id);
        }
        
        // Th√™m ƒëi·ªÅu ki·ªán WHERE n·∫øu c√≥
        if (conditions.length > 0) {
            query += ' WHERE ' + conditions.join(' AND ');
        }
        
        query += ' ORDER BY created_at DESC';
        
        const machines = await db.allAsync(query, params);
        
        console.log(`‚úÖ Tr·∫£ v·ªÅ ${machines.length} m√°y t·ª´ database`);
        res.json(machines);
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch m√°y:', error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√°y' });
    }
});

//TODO L·∫•y danh s√°ch m√°y ƒëang ho·∫°t ƒë·ªông========================================================================
router.get('/active/list', async (req, res) => {
    try {
        console.log('üì° GET /machines/active/list ƒë∆∞·ª£c g·ªçi');
        
        let query = `
        SELECT id, name, location, status, description, department, system_id, module_id,
               created_at, updated_at 
        FROM machines 
        WHERE status = 'active'
    `;
    
    const params = [];
    if (req.query.module_id) {
        query += ` AND module_id = ?`;
        params.push(req.query.module_id);
    } else if (req.query.system_id) {
        query += ` AND system_id = ?`;
        params.push(req.query.system_id);
    }
    
    query += ` ORDER BY created_at DESC`;
    
    const activeMachines = await db.allAsync(query, params);
        
        console.log(`‚úÖ Tr·∫£ v·ªÅ ${activeMachines.length} m√°y ƒëang ho·∫°t ƒë·ªông`);
        res.json(activeMachines);
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch m√°y ho·∫°t ƒë·ªông:', error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√°y ho·∫°t ƒë·ªông' });
    }
});

//TODO L·∫•y m√°y theo ID========================================================================
router.get('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üì° GET /machines/${id} ƒë∆∞·ª£c g·ªçi`);
        
        const machine = await db.getAsync(`
            SELECT id, name, location, status, description, department, system_id, module_id,
                   created_at, updated_at 
            FROM machines 
            WHERE id = ?
        `, [id]);
        
        if (!machine) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√°y' });
        }
        
        console.log(`‚úÖ Tr·∫£ v·ªÅ th√¥ng tin m√°y ID: ${id}`);
        res.json(machine);
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y m√°y ID ${req.params.id}:`, error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√°y' });
    }
});



//TODO L·∫•y m√°y theo t√™n========================================================================
router.get('/by-name/:name', async (req, res) => {
    try {
        const { name } = req.params;
        console.log(`üì° GET /machines/by-name/${name} ƒë∆∞·ª£c g·ªçi`);
        
        const machine = await db.getAsync(`
            SELECT id, name, location, status, description, department, system_id, module_id,
                   created_at, updated_at 
            FROM machines 
            WHERE name = ?
        `, [name]);
        
        if (!machine) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√°y' });
        }
        
        console.log(`‚úÖ Tr·∫£ v·ªÅ th√¥ng tin m√°y: ${name}`);
        res.json(machine);
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y m√°y t√™n ${req.params.name}:`, error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√°y' });
    }
});



//TODO T·∫°o m√°y m·ªõi========================================================================
router.post('/', async (req, res) => {
    try {
        console.log('üì° POST /machines ƒë∆∞·ª£c g·ªçi v·ªõi data:', req.body);
        
        const { name, location, status = 'active', description, department, system_id = 'sanxuat-nm1', module_id } = req.body;

        
        // Validate d·ªØ li·ªáu
        if (!name || name.trim() === '') {
            return res.status(400).json({ error: 'T√™n m√°y l√† b·∫Øt bu·ªôc' });
        }
        
        // Ki·ªÉm tra tr√πng l·∫∑p t√™n m√°y
        const existingMachine = await db.getAsync(`
            SELECT id FROM machines WHERE name = ?
        `, [name.trim()]);
        
        if (existingMachine) {
            return res.status(400).json({ error: 'T√™n m√°y ƒë√£ t·ªìn t·∫°i' });
        }
        
        
        
        // T·∫°o m√°y m·ªõi
        const machineId = Date.now().toString();
        const machineData = {
            id: machineId,
            name: name.trim(),
            location: location ? location.trim() : null,
            status: status,
            description: description ? description.trim() : null,
            department: department ? department.trim() : null,
            system_id: system_id, // Th√™m d√≤ng n√†y
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
        
        await db.runAsync(`
            INSERT INTO machines (id, name, location, status, description, department, system_id, module_id, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
            machineData.id,
            machineData.name,
            machineData.location,
            machineData.status,
            machineData.description,
            machineData.department,
            machineData.system_id,
            module_id,  // TH√äM D√íNG N√ÄY
            machineData.created_at,
            machineData.updated_at
        ]);
        
        console.log('‚úÖ T·∫°o m√°y th√†nh c√¥ng:', machineData);
        
        res.status(201).json({
            message: 'T·∫°o m√°y th√†nh c√¥ng',
            machine: machineData
        });
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o m√°y:', error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ t·∫°o m√°y m·ªõi' });
    }
});

//TODO C·∫≠p nh·∫≠t m√°y========================================================================
router.put('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { name, location, status, description, department } = req.body;
        
        console.log(`üì° PUT /machines/${id} ƒë∆∞·ª£c g·ªçi v·ªõi data:`, req.body);
        
        // Validate d·ªØ li·ªáu
        if (!name || name.trim() === '') {
            return res.status(400).json({ error: 'T√™n m√°y l√† b·∫Øt bu·ªôc' });
        }
        
        // Ki·ªÉm tra m√°y c√≥ t·ªìn t·∫°i kh√¥ng
        const existingMachine = await db.getAsync(`
            SELECT id FROM machines WHERE id = ?
        `, [id]);
        
        if (!existingMachine) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√°y' });
        }
        
        // Ki·ªÉm tra tr√πng l·∫∑p t√™n m√°y (tr·ª´ ch√≠nh n√≥)
        const duplicateName = await db.getAsync(`
            SELECT id FROM machines WHERE name = ? AND id != ?
        `, [name.trim(), id]);
        
        if (duplicateName) {
            return res.status(400).json({ error: 'T√™n m√°y ƒë√£ t·ªìn t·∫°i' });
        }
        
        
        
        // C·∫≠p nh·∫≠t m√°y
        await db.runAsync(`
            UPDATE machines 
            SET name = ?, location = ?, status = ?, description = ?, department = ?, updated_at = ?
            WHERE id = ?
        `, [
            name.trim(),
            location ? location.trim() : null,
            status || 'active',
            description ? description.trim() : null,
            department ? department.trim() : null,
            new Date().toISOString(),
            id
        ]);
        
        // L·∫•y th√¥ng tin m√°y sau khi c·∫≠p nh·∫≠t
        const updatedMachine = await db.getAsync(`
            SELECT id, name, location, status, description, department, 
                   created_at, updated_at 
            FROM machines 
            WHERE id = ?
        `, [id]);
        
        console.log('‚úÖ C·∫≠p nh·∫≠t m√°y th√†nh c√¥ng:', updatedMachine);
        
        res.json({
            message: 'C·∫≠p nh·∫≠t m√°y th√†nh c√¥ng',
            machine: updatedMachine
        });
    } catch (error) {
        console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t m√°y ID ${req.params.id}:`, error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√°y' });
    }
});

//TODO X√≥a m√°y========================================================================
router.delete('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üì° DELETE /machines/${id} ƒë∆∞·ª£c g·ªçi`);
        
        // Ki·ªÉm tra m√°y c√≥ t·ªìn t·∫°i kh√¥ng
        const existingMachine = await db.getAsync(`
            SELECT id, name FROM machines WHERE id = ?
        `, [id]);
        
        if (!existingMachine) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√°y' });
        }
        
        // X√≥a m√°y
        const result = await db.runAsync(`
            DELETE FROM machines WHERE id = ?
        `, [id]);
        
        if (result.changes === 0) {
            return res.status(404).json({ error: 'Kh√¥ng th·ªÉ x√≥a m√°y' });
        }
        
        console.log(`‚úÖ X√≥a m√°y th√†nh c√¥ng: ${existingMachine.name}`);
        
        res.json({
            message: 'X√≥a m√°y th√†nh c√¥ng',
            machine: existingMachine
        });
    } catch (error) {
        console.error(`‚ùå L·ªói khi x√≥a m√°y ID ${req.params.id}:`, error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a m√°y' });
    }
});

//TODO Test endpoint========================================================================
router.get('/test', (req, res) => {
    console.log('üì° /machines/test ƒë∆∞·ª£c g·ªçi');
    res.json({ 
        message: 'Machines API ho·∫°t ƒë·ªông!',
        timestamp: new Date().toISOString(),
        status: 'SUCCESS'
    });
});

module.exports = router;