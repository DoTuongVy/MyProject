// Bi·∫øn theo d√µi s·ªë l∆∞·ª£ng l√Ω do d·ª´ng m√°y hi·ªán t·∫°i
let reasonCount = 1;

// H√†m t·ª± ƒë·ªông th√™m l√Ω do d·ª´ng m√°y m·ªõi
function addNewStopReason() {
  // TƒÉng bi·∫øn ƒë·∫øm l√Ω do
  reasonCount++;
  const newReasonId = `reason-${reasonCount}`;
  
  // Ki·ªÉm tra xem ƒë√£ c√≥ ph·∫ßn t·ª≠ n√†y ch∆∞a
  if (document.getElementById(newReasonId)) return;
  
  console.log("Th√™m l√Ω do d·ª´ng m√°y m·ªõi:", newReasonId);
  
  // T·∫°o HTML cho l√Ω do m·ªõi
  const newReasonHtml = `
    <div class="stop-reason-container" id="${newReasonId}">
      <hr>
      <div class="row mb-3">
        <div class="col-4">
          <label class="fw-bold mb-1">L√Ω do d·ª´ng m√°y</label>
          <select class="form-select stop-reason-select">
            <option value="">-- L√Ω do --</option>
            <option value="H·ªèng thi·∫øt b·ªã">H·ªèng thi·∫øt b·ªã</option>
            <option value="B·∫£o tr√¨ ƒë·ªãnh k·ª≥">B·∫£o tr√¨ ƒë·ªãnh k·ª≥</option>
            <option value="M·∫•t ƒëi·ªán">M·∫•t ƒëi·ªán</option>
            <option value="L·ªói k·ªπ thu·∫≠t">L·ªói k·ªπ thu·∫≠t</option>
          </select>
        </div>
        
        <div class="col-4 time-inputs-${reasonCount}" style="display: none;">
          <label class="fw-bold mb-1">Th·ªùi gian d·ª´ng m√°y</label>
          <div class="position-relative">
            <input type="datetime-local" class="form-control stop-time-input">
            <button class="btn btn-primary position-absolute top-0 end-0 h-100 stop-time-button" style="z-index: 10;">
              D·ª´ng m√°y
            </button>
          </div>
          <div class="form-text stop-time-display"></div>
        </div>
        
        <div class="col-4 time-inputs-${reasonCount}" style="display: none;">
          <label class="fw-bold mb-1">Th·ªùi gian ch·∫°y l·∫°i</label>
          <div class="position-relative">
            <input type="datetime-local" class="form-control resume-time-input">
            <button class="btn btn-success position-absolute top-0 end-0 h-100 resume-time-button" style="z-index: 10;">
              Ch·∫°y l·∫°i
            </button>
          </div>
          <div class="form-text resume-time-display"></div>
        </div>
      </div>
      
      <div class="row mb-3 additional-fields-${reasonCount}" style="display: none;">
        <div class="col-8">
          <label class="fw-bold mb-1">L√Ω do kh√°c</label>
          <input type="text" class="form-control" placeholder="Nh·∫≠p l√Ω do...">
        </div>
        <div class="col-4">
          <label class="fw-bold mb-1 text-primary">Th·ªùi gian d·ª´ng m√°y</label>
          <input type="text" class="form-control bg-light stop-duration" readonly>
        </div>
      </div>
      
      <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-danger delete-reason-btn" data-reason-id="${newReasonId}">
          <i class="bi bi-trash">üóëÔ∏è</i>
        </button>
      </div>
    </div>
  `;
  
  // T√¨m container ƒë·ªÉ th√™m v√†o
  const additionalReasonsContainer = document.getElementById('additionalReasonsContainer');
  if (additionalReasonsContainer) {
    additionalReasonsContainer.insertAdjacentHTML('beforeend', newReasonHtml);
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho l√Ω do m·ªõi
    setupNewReasonEvents(newReasonId);
    console.log("ƒê√£ th√™m l√Ω do m·ªõi v√† thi·∫øt l·∫≠p s·ª± ki·ªán");
  } else {
    console.error("Kh√¥ng t√¨m th·∫•y container additionalReasonsContainer");
  }
}

// Thi·∫øt l·∫≠p c√°c event listener cho l√Ω do m·ªõi
// function setupNewReasonEvents(reasonId) {
//   const container = document.getElementById(reasonId);
//   if (!container) return;

//   const reasonSelect = container.querySelector('.stop-reason-select');
//   const timeInputs = container.querySelectorAll(`[class*="time-inputs-"]`);
//   const additionalFields = container.querySelector(`[class*="additional-fields-"]`);
//   const stopTimeInput = container.querySelector('.stop-time-input');
//   const resumeTimeInput = container.querySelector('.resume-time-input');
//   const stopTimeButton = container.querySelector('.stop-time-button');
//   const resumeTimeButton = container.querySelector('.resume-time-button');
//   const stopTimeDisplay = container.querySelector('.stop-time-display');
//   const resumeTimeDisplay = container.querySelector('.resume-time-display');
//   const stopDuration = container.querySelector('.stop-duration');
//   const deleteButton = container.querySelector('.delete-reason-btn');

//   // S·ª± ki·ªán ch·ªçn l√Ω do
//   if (reasonSelect) {
//     reasonSelect.addEventListener('change', function() {
//       if (this.value) {
//         timeInputs.forEach(input => {
//           input.style.display = 'block';
//         });
//         if (additionalFields) additionalFields.style.display = 'flex';
//       } else {
//         timeInputs.forEach(input => {
//           input.style.display = 'none';
//         });
//         if (additionalFields) additionalFields.style.display = 'none';
//       }
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
//     });
//   }

//   // S·ª± ki·ªán n√∫t th·ªùi gian d·ª´ng m√°y
//   if (stopTimeButton) {
//     stopTimeButton.addEventListener('click', function(e) {
//       e.preventDefault();
//       e.stopPropagation();
      
//       const now = new Date();
//       const formattedDateTime = formatDateTimeForInput(now);
//       stopTimeInput.value = formattedDateTime;
//       this.style.display = 'none';
//       if (stopTimeDisplay) stopTimeDisplay.textContent = formatDisplayTime(now);
//       calculateDurationForReason(stopTimeInput, resumeTimeInput, stopDuration);
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
      
//       return false;
//     });
//   }

//   // S·ª± ki·ªán n√∫t th·ªùi gian ch·∫°y l·∫°i
//   if (resumeTimeButton) {
//     resumeTimeButton.addEventListener('click', function(e) {
//       e.preventDefault();
//       e.stopPropagation();
      
//       const now = new Date();
//       const formattedDateTime = formatDateTimeForInput(now);
//       resumeTimeInput.value = formattedDateTime;
//       this.style.display = 'none';
//       if (resumeTimeDisplay) resumeTimeDisplay.textContent = formatDisplayTime(now);
//       calculateDurationForReason(stopTimeInput, resumeTimeInput, stopDuration);
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
      
//       return false;
//     });
//   }

//   // S·ª± ki·ªán n√∫t x√≥a
//   if (deleteButton) {
//     deleteButton.addEventListener('click', function(e) {
//       e.preventDefault();
//       e.stopPropagation();
      
//       const reasonId = this.getAttribute('data-reason-id');
//       const reasonEl = document.getElementById(reasonId);
//       if (reasonEl) {
//         reasonEl.remove();
        
//         // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//         if (typeof updateProgress === 'function') {
//           updateProgress();
//         }
//       }
      
//       return false;
//     });
//   }
// }

// Ch·ª©c nƒÉng m·ªõi ƒë·ªÉ ki·ªÉm tra v√† t·ª± ƒë·ªông th√™m l√Ω do
function checkAndAddNewReason() {
  const stopTimeInput = document.getElementById('stopTimeInput');
  const resumeTimeInput = document.getElementById('resumeTimeInput');
  
  if (stopTimeInput && resumeTimeInput && 
      stopTimeInput.value && resumeTimeInput.value) {
    console.log("ƒêi·ªÅu ki·ªán ƒë√£ ƒë·ªß, ƒëang th√™m l√Ω do m·ªõi");
    addNewStopReason();
  } else {
    console.log("ƒêi·ªÅu ki·ªán ch∆∞a ƒë·ªß ƒë·ªÉ th√™m l√Ω do m·ªõi", {
      stopTimeValue: stopTimeInput?.value,
      resumeTimeValue: resumeTimeInput?.value
    });
  }
}

// Thi·∫øt l·∫≠p ki·ªÉm tra t·ª± ƒë·ªông khi th·ªùi gian ƒë∆∞·ª£c nh·∫≠p ƒë·∫ßy ƒë·ªß
document.addEventListener('DOMContentLoaded', function() {
  // X√≥a b·ªè section th√™m l√Ω do m·ªõi n·∫øu c√≥
  const addReasonSection = document.querySelector('.add-reason-section');
  if (addReasonSection) {
    addReasonSection.style.display = 'none';
  }
  
  console.log("ƒê√£ t·∫£i trang, thi·∫øt l·∫≠p ki·ªÉm tra th·ªùi gian");
  
  // Ki·ªÉm tra th·ªùi gian d·ª´ng v√† th·ªùi gian ch·∫°y l·∫°i
  const stopTimeInput = document.getElementById('stopTimeInput');
  const resumeTimeInput = document.getElementById('resumeTimeInput');
  
  if (stopTimeInput && resumeTimeInput) {
    // Thi·∫øt l·∫≠p s·ª± ki·ªán khi th·ªùi gian thay ƒë·ªïi
    stopTimeInput.addEventListener('change', function() {
      console.log("Th·ªùi gian d·ª´ng ƒë√£ thay ƒë·ªïi:", this.value);
      setTimeout(function() {
        if (stopTimeInput.value && resumeTimeInput.value) {
          checkAndAddNewReason();
        }
      }, 300);
    });
    
    resumeTimeInput.addEventListener('change', function() {
      console.log("Th·ªùi gian ch·∫°y l·∫°i ƒë√£ thay ƒë·ªïi:", this.value);
      setTimeout(function() {
        if (stopTimeInput.value && resumeTimeInput.value) {
          checkAndAddNewReason();
        }
      }, 300);
    });
  }
  
  // Ghi ƒë√® l√™n s·ª± ki·ªán t√≠nh th·ªùi gian
  const originalCalculateDuration = window.calculateDuration;
  window.calculateDuration = function() {
    // G·ªçi h√†m g·ªëc
    if (typeof originalCalculateDuration === 'function') {
      originalCalculateDuration();
    }
    
    // Ki·ªÉm tra sau khi t√≠nh th·ªùi gian
    setTimeout(checkAndAddNewReason, 300);
  };
});