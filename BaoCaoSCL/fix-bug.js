// // H√†m ri√™ng bi·ªát ƒë·ªÉ x·ª≠ l√Ω th√™m l√Ω do d·ª´ng m√°y
window.handleAddReasonButtonClick = function(e) {
  // NgƒÉn ch·∫∑n t·∫•t c·∫£ h√†nh vi m·∫∑c ƒë·ªãnh
  if (e) {
    e.preventDefault();
    e.stopPropagation();
  }
  
  // TƒÉng bi·∫øn ƒë·∫øm l√Ω do
  window.reasonCount = (window.reasonCount || 1) + 1;
  const newReasonId = `reason-${window.reasonCount}`;
  
  // T·∫°o HTML cho l√Ω do m·ªõi
  const newReasonHtml = `
    <div class="stop-reason-container" id="${newReasonId}">
    <hr>
    <div class="row mb-3">
        <div class="col-4">
        <label class="fw-bold mb-1">L√Ω do d·ª´ng m√°y</label>
        <select class="form-select stop-reason-select">
            <option value="">-- L√Ω do --</option>
            <option value="H·ªèng thi·∫øt b·ªã">H·ªèng thi·∫øt b·ªã</option>
            <option value="B·∫£o tr√¨ ƒë·ªãnh k·ª≥">B·∫£o tr√¨ ƒë·ªãnh k·ª≥</option>
            <option value="M·∫•t ƒëi·ªán">M·∫•t ƒëi·ªán</option>
            <option value="L·ªói k·ªπ thu·∫≠t">L·ªói k·ªπ thu·∫≠t</option>
        </select>
        </div>
        
        <div class="col-4 time-inputs-${window.reasonCount}" style="display: none;">
        <label class="fw-bold mb-1">Th·ªùi gian d·ª´ng m√°y</label>
        <div class="position-relative">
            <input type="datetime-local" class="form-control stop-time-input">
            <button class="btn btn-primary position-absolute top-0 end-0 h-100 stop-time-button" style="z-index: 10;">
            D·ª´ng m√°y
            </button>
        </div>
        <div class="form-text stop-time-display"></div>
        </div>
        
        <div class="col-4 time-inputs-${window.reasonCount}" style="display: none;">
        <label class="fw-bold mb-1">Th·ªùi gian ch·∫°y l·∫°i</label>
        <div class="position-relative">
            <input type="datetime-local" class="form-control resume-time-input">
            <button class="btn btn-success position-absolute top-0 end-0 h-100 resume-time-button" style="z-index: 10;">
            Ch·∫°y l·∫°i
            </button>
        </div>
        <div class="form-text resume-time-display"></div>
        </div>
    </div>
    
    <div class="row mb-3 additional-fields-${window.reasonCount}" style="display: none;">
        <div class="col-8">
        <label class="fw-bold mb-1">L√Ω do kh√°c</label>
        <input type="text" class="form-control" placeholder="Nh·∫≠p l√Ω do...">
        </div>
        <div class="col-4">
        <label class="fw-bold mb-1 text-primary">Th·ªùi gian d·ª´ng m√°y</label>
        <input type="text" class="form-control bg-light stop-duration" readonly>
        </div>
    </div>
    
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-danger delete-reason-btn" data-reason-id="${newReasonId}">
        <i class="bi bi-trash">üóëÔ∏è</i>
        </button>
    </div>
    </div>
  `;
  
  // T√¨m container ƒë·ªÉ th√™m v√†o
  const additionalReasonsContainer = document.getElementById('additionalReasonsContainer');
  if (additionalReasonsContainer) {
    additionalReasonsContainer.insertAdjacentHTML('beforeend', newReasonHtml);
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho l√Ω do m·ªõi
    setupNewReasonEvents(newReasonId);
  }
  
  // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
  if (typeof updateProgress === 'function') {
    updateProgress();
  }
  
  console.log("ƒê√£ th√™m l√Ω do d·ª´ng m√°y m·ªõi");
  return false;
};

// H√†m ch·ªß ƒë·ªông c·∫≠p nh·∫≠t n√∫t "Th√™m l√Ω do d·ª´ng m√°y"
function fixAddReasonButton() {
  const addReasonBtn = document.getElementById('addReasonBtn');
  if (!addReasonBtn) return false;
  
  console.log("ƒêang s·ª≠a n√∫t th√™m l√Ω do d·ª´ng m√°y...");
  
  // T·∫°o n√∫t m·ªõi ƒë·ªÉ thay th·∫ø
  const newAddReasonBtn = document.createElement('button');
  
  // Sao ch√©p t·∫•t c·∫£ thu·ªôc t√≠nh
  Array.from(addReasonBtn.attributes).forEach(attr => {
    newAddReasonBtn.setAttribute(attr.name, attr.value);
  });
  
  // Sao ch√©p n·ªôi dung v√† class
  newAddReasonBtn.innerHTML = addReasonBtn.innerHTML;
  newAddReasonBtn.className = addReasonBtn.className;
  newAddReasonBtn.type = 'button'; // ƒê·∫£m b·∫£o l√† button type
  
  // Thi·∫øt l·∫≠p s·ª± ki·ªán tr·ª±c ti·∫øp
  newAddReasonBtn.onclick = window.handleAddReasonButtonClick;
  
  // Thay th·∫ø n√∫t c≈© b·∫±ng n√∫t m·ªõi
  if (addReasonBtn.parentNode) {
    addReasonBtn.parentNode.replaceChild(newAddReasonBtn, addReasonBtn);
    console.log("ƒê√£ thay th·∫ø n√∫t th√™m l√Ω do d·ª´ng m√°y th√†nh c√¥ng");
    return true;
  }
  
  return false;
}

// S·ª≠a th√™m h√†m thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c l√Ω do m·ªõi
// function setupNewReasonEvents(reasonId) {
//   const container = document.getElementById(reasonId);
//   if (!container) return;

//   const reasonSelect = container.querySelector('.stop-reason-select');
//   const timeInputs = container.querySelectorAll(`[class*="time-inputs-"]`);
//   const additionalFields = container.querySelector(`[class*="additional-fields-"]`);
//   const stopTimeInput = container.querySelector('.stop-time-input');
//   const resumeTimeInput = container.querySelector('.resume-time-input');
//   const stopTimeButton = container.querySelector('.stop-time-button');
//   const resumeTimeButton = container.querySelector('.resume-time-button');
//   const stopTimeDisplay = container.querySelector('.stop-time-display');
//   const resumeTimeDisplay = container.querySelector('.resume-time-display');
//   const stopDuration = container.querySelector('.stop-duration');
//   const deleteButton = container.querySelector('.delete-reason-btn');

//   // S·ª± ki·ªán ch·ªçn l√Ω do
//   if (reasonSelect) {
//     reasonSelect.addEventListener('change', function() {
//       if (this.value) {
//         timeInputs.forEach(input => {
//           input.style.display = 'block';
//         });
//         if (additionalFields) additionalFields.style.display = 'flex';
//       } else {
//         timeInputs.forEach(input => {
//           input.style.display = 'none';
//         });
//         if (additionalFields) additionalFields.style.display = 'none';
//       }
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
//     });
//   }

//   // S·ª± ki·ªán n√∫t th·ªùi gian d·ª´ng m√°y - S·ª¨A L·ªñI N√öT KH√îNG M·∫§T
//   if (stopTimeButton) {
//     stopTimeButton.onclick = function(e) {
//       if (e) {
//         e.preventDefault();
//         e.stopPropagation();
//       }
      
//       const now = new Date();
//       const formattedDateTime = formatDateTimeForInput(now);
//       stopTimeInput.value = formattedDateTime;
      
//       // ·∫®n n√∫t ngay l·∫≠p t·ª©c
//       this.style.display = 'none';
      
//       if (stopTimeDisplay) {
//         stopTimeDisplay.textContent = formatDisplayTime(now);
//       }
      
//       // T√≠nh th·ªùi gian d·ª´ng m√°y
//       if (stopTimeInput && resumeTimeInput && stopDuration) {
//         if (resumeTimeInput.value) {
//           // N·∫øu c√≥ th·ªùi gian ch·∫°y l·∫°i, t√≠nh th·ªùi gian d·ª´ng m√°y
//           const stopTime = new Date(stopTimeInput.value);
//           const resumeTime = new Date(resumeTimeInput.value);
          
//           if (resumeTime > stopTime) {
//             const diff = resumeTime - stopTime;
//             const hours = Math.floor(diff / (1000 * 60 * 60));
//             const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
//             const seconds = Math.floor((diff % (1000 * 60)) / 1000);
            
//             stopDuration.value = `${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y`;
//           } else {
//             stopDuration.value = '0 gi·ªù 0 ph√∫t 0 gi√¢y';
//           }
//         }
//       }
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
      
//       return false;
//     };
//   }

//   // S·ª± ki·ªán n√∫t th·ªùi gian ch·∫°y l·∫°i - S·ª¨A L·ªñI N√öT KH√îNG M·∫§T
//   if (resumeTimeButton) {
//     resumeTimeButton.onclick = function(e) {
//       if (e) {
//         e.preventDefault();
//         e.stopPropagation();
//       }
      
//       const now = new Date();
//       const formattedDateTime = formatDateTimeForInput(now);
//       resumeTimeInput.value = formattedDateTime;
      
//       // ·∫®n n√∫t ngay l·∫≠p t·ª©c
//       this.style.display = 'none';
      
//       if (resumeTimeDisplay) {
//         resumeTimeDisplay.textContent = formatDisplayTime(now);
//       }
      
//       // T√≠nh th·ªùi gian d·ª´ng m√°y
//       if (stopTimeInput && resumeTimeInput && stopDuration) {
//         if (stopTimeInput.value) {
//           // N·∫øu c√≥ th·ªùi gian d·ª´ng m√°y, t√≠nh th·ªùi gian d·ª´ng m√°y
//           const stopTime = new Date(stopTimeInput.value);
//           const resumeTime = new Date(resumeTimeInput.value);
          
//           if (resumeTime > stopTime) {
//             const diff = resumeTime - stopTime;
//             const hours = Math.floor(diff / (1000 * 60 * 60));
//             const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
//             const seconds = Math.floor((diff % (1000 * 60)) / 1000);
            
//             stopDuration.value = `${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y`;
//           } else {
//             stopDuration.value = '0 gi·ªù 0 ph√∫t 0 gi√¢y';
//           }
//         }
//       }
      
//       // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
//       if (typeof updateProgress === 'function') {
//         updateProgress();
//       }
      
//       return false;
//     };
//   }

//   // S·ª± ki·ªán n√∫t x√≥a
//   if (deleteButton) {
//     deleteButton.addEventListener('click', function(e) {
//       e.preventDefault();
//       e.stopPropagation();
      
//       const reasonId = this.getAttribute('data-reason-id');
//       const reasonEl = document.getElementById(reasonId);
//       if (reasonEl) {
//         reasonEl.remove();
        
//         // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
//         if (typeof updateProgress === 'function') {
//           updateProgress();
//         }
//       }
      
//       return false;
//     });
//   }
// }

// Th√™m m·ªôt DOMContentLoaded listener m·ªõi ƒë·ªÉ s·ª≠a n√∫t
document.addEventListener('DOMContentLoaded', function() {
  // Th·ª≠ s·ª≠a n√∫t ngay khi trang t·∫£i xong
  setTimeout(fixAddReasonButton, 500);
  
  // Th·ª≠ l·∫°i sau 1 gi√¢y ƒë·ªÉ ch·∫Øc ch·∫Øn
  setTimeout(fixAddReasonButton, 1000);
  
  // Th·ª≠ l·∫°i sau 2 gi√¢y
  setTimeout(fixAddReasonButton, 2000);
  
  // C·ªë ƒë·ªãnh l·ªói khi tab hi·ªÉn th·ªã
  const navDungMayTab = document.getElementById('btnYes');
  if (navDungMayTab) {
    navDungMayTab.addEventListener('click', function() {
      // S·ª≠a n√∫t khi hi·ªÉn th·ªã tab d·ª´ng m√°y
      setTimeout(fixAddReasonButton, 100);
      
      // S·ª≠a c√°c n√∫t th·ªùi gian trong b√°o c√°o d·ª´ng m√°y ch√≠nh
      setTimeout(fixStopTimeButtons, 200);
    });
  }
  
  // S·ª≠a c√°c n√∫t th·ªùi gian trong b√°o c√°o d·ª´ng m√°y khi trang t·∫£i xong
  setTimeout(fixStopTimeButtons, 500);
});

// H√†m s·ª≠a c√°c n√∫t th·ªùi gian trong b√°o c√°o d·ª´ng m√°y ch√≠nh
function fixStopTimeButtons() {
  // S·ª≠a n√∫t th·ªùi gian d·ª´ng m√°y
  const stopTimeButton = document.getElementById('stopTimeButton');
  if (stopTimeButton) {
    console.log("ƒêang s·ª≠a n√∫t th·ªùi gian d·ª´ng m√°y...");
    
    // T·∫°o n√∫t m·ªõi ƒë·ªÉ thay th·∫ø
    const newStopTimeButton = document.createElement('button');
    
    // Sao ch√©p t·∫•t c·∫£ thu·ªôc t√≠nh
    Array.from(stopTimeButton.attributes).forEach(attr => {
      newStopTimeButton.setAttribute(attr.name, attr.value);
    });
    
    // Sao ch√©p n·ªôi dung v√† class
    newStopTimeButton.innerHTML = stopTimeButton.innerHTML;
    newStopTimeButton.className = stopTimeButton.className;
    newStopTimeButton.id = 'stopTimeButton';
    newStopTimeButton.type = 'button'; // ƒê·∫£m b·∫£o l√† button type
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán tr·ª±c ti·∫øp
    newStopTimeButton.onclick = function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const stopTimeInput = document.getElementById('stopTimeInput');
      const stopTimeDisplay = document.getElementById('stopTimeDisplay');
      
      const now = new Date();
      const formattedDateTime = formatDateTimeForInput(now);
      if (stopTimeInput) stopTimeInput.value = formattedDateTime;
      this.style.display = 'none';
      if (stopTimeDisplay) stopTimeDisplay.textContent = formatDisplayTime(now);
      
      // T√≠nh th·ªùi gian
      if (typeof calculateDuration === 'function') {
        calculateDuration();
      }
      
      // Ki·ªÉm tra hi·ªÉn th·ªã n√∫t th√™m l√Ω do
      if (typeof window.checkShowAddReasonButton === 'function') {
        window.checkShowAddReasonButton();
      }
      
      // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
      if (typeof updateProgress === 'function') {
        updateProgress();
      }
      
      console.log("ƒê√£ x·ª≠ l√Ω n√∫t th·ªùi gian d·ª´ng m√°y");
      return false;
    };
    
    // Thay th·∫ø n√∫t c≈© b·∫±ng n√∫t m·ªõi
    if (stopTimeButton.parentNode) {
      stopTimeButton.parentNode.replaceChild(newStopTimeButton, stopTimeButton);
      console.log("ƒê√£ thay th·∫ø n√∫t th·ªùi gian d·ª´ng m√°y th√†nh c√¥ng");
    }
  }
  
  // S·ª≠a n√∫t th·ªùi gian ch·∫°y l·∫°i
  const resumeTimeButton = document.getElementById('resumeTimeButton');
  if (resumeTimeButton) {
    console.log("ƒêang s·ª≠a n√∫t th·ªùi gian ch·∫°y l·∫°i...");
    
    // T·∫°o n√∫t m·ªõi ƒë·ªÉ thay th·∫ø
    const newResumeTimeButton = document.createElement('button');
    
    // Sao ch√©p t·∫•t c·∫£ thu·ªôc t√≠nh
    Array.from(resumeTimeButton.attributes).forEach(attr => {
      newResumeTimeButton.setAttribute(attr.name, attr.value);
    });
    
    // Sao ch√©p n·ªôi dung v√† class
    newResumeTimeButton.innerHTML = resumeTimeButton.innerHTML;
    newResumeTimeButton.className = resumeTimeButton.className;
    newResumeTimeButton.id = 'resumeTimeButton';
    newResumeTimeButton.type = 'button'; // ƒê·∫£m b·∫£o l√† button type
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán tr·ª±c ti·∫øp
    newResumeTimeButton.onclick = function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const resumeTimeInput = document.getElementById('resumeTimeInput');
      const resumeTimeDisplay = document.getElementById('resumeTimeDisplay');
      
      const now = new Date();
      const formattedDateTime = formatDateTimeForInput(now);
      if (resumeTimeInput) resumeTimeInput.value = formattedDateTime;
      this.style.display = 'none';
      if (resumeTimeDisplay) resumeTimeDisplay.textContent = formatDisplayTime(now);
      
      // T√≠nh th·ªùi gian
      if (typeof calculateDuration === 'function') {
        calculateDuration();
      }
      
      // Ki·ªÉm tra hi·ªÉn th·ªã n√∫t th√™m l√Ω do
      if (typeof window.checkShowAddReasonButton === 'function') {
        window.checkShowAddReasonButton();
      }
      
      // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô n·∫øu c·∫ßn
      if (typeof updateProgress === 'function') {
        updateProgress();
      }
      
      console.log("ƒê√£ x·ª≠ l√Ω n√∫t th·ªùi gian ch·∫°y l·∫°i");
      return false;
    };
    
    // Thay th·∫ø n√∫t c≈© b·∫±ng n√∫t m·ªõi
    if (resumeTimeButton.parentNode) {
      resumeTimeButton.parentNode.replaceChild(newResumeTimeButton, resumeTimeButton);
      console.log("ƒê√£ thay th·∫ø n√∫t th·ªùi gian ch·∫°y l·∫°i th√†nh c√¥ng");
    }
  }
}
  
// Helper function ƒë√£ s·∫µn c√≥ - ƒë·∫£m b·∫£o l√† ch√∫ng h·ª£p l·ªá
function calculateDurationForReason(stopInput, resumeInput, durationOutput) {
  if (stopInput && resumeInput && durationOutput &&
      stopInput.value && resumeInput.value) {
      const stopTime = new Date(stopInput.value);
      const resumeTime = new Date(resumeInput.value);

      if (resumeTime > stopTime) {
          const diff = resumeTime - stopTime;

          const hours = Math.floor(diff / (1000 * 60 * 60));
          const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((diff % (1000 * 60)) / 1000);

          durationOutput.value = `${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y`;
      } else {
          durationOutput.value = '0 gi·ªù 0 ph√∫t 0 gi√¢y';
      }
  }
}

// H√†m ƒë·ªãnh d·∫°ng datetime cho input
function formatDateTimeForInput(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');

  // Th√™m gi√¢y v√†o ƒë·ªãnh d·∫°ng datetime-local
  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian hi·ªÉn th·ªã
function formatDisplayTime(date) {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  const ampm = date.getHours() >= 12 ? 'PM' : 'AM';

  return `${day}/${month}/${year}, ${hours}:${minutes}:${seconds} ${ampm}`;
}