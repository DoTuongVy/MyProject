// ====================================================================================================================================
// FILE: Bieudo.js
// M√î T·∫¢: JavaScript cho h·ªá th·ªëng bi·ªÉu ƒë·ªì s·∫£n xu·∫•t nh√† m√°y 1
// ====================================================================================================================================

console.log('üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng bi·ªÉu ƒë·ªì s·∫£n xu·∫•t...');

// ƒêƒÉng k√Ω plugin datalabels
Chart.register(ChartDataLabels);

// Bi·∫øn to√†n c·ª•c
let currentChartData = null;
let pieChart = null;
let quantityChart = null;  // Th√™m d√≤ng n√†y
let macaChart = null;      // Th√™m d√≤ng n√†y
let timeChart = null;
let stopReasonChart = null; 

// ====================================================================================================================================
// KH·ªûI T·∫†O H·ªÜ TH·ªêNG
// ====================================================================================================================================

document.addEventListener('DOMContentLoaded', function () {
    console.log('üéØ DOM Content Loaded - B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o');
    
    // Ki·ªÉm tra trang hi·ªán t·∫°i
    const currentPage = window.location.pathname.split('/').pop().toLowerCase();
    console.log('üìÑ Current page detected:', currentPage);
    console.log('üìç Full pathname:', window.location.pathname);
    
    if (currentPage === 'dashboard.html' || currentPage === '') {
        console.log('‚úÖ V√†o Dashboard branch');
        initDashboard();
    } else if (currentPage === 'baocaoin.html') {
        console.log('‚úÖ V√†o Baocaoin branch');
        initBaoCaoIn();
    } else if (currentPage === 'baocaogmc.html') {
        console.log('‚úÖ V√†o Baocaogmc branch');
        initBaoCaoGMC();
    } else {
        console.log('‚ùå Kh√¥ng match page n√†o:', currentPage);
    }
});
// ====================================================================================================================================
// DASHBOARD FUNCTIONS
// ====================================================================================================================================

// Kh·ªüi t·∫°o Dashboard
async function initDashboard() {
    try {
        showLoading(true);
        await loadModules();
        showLoading(false);
    } catch (error) {
        console.error('L·ªói kh·ªüi t·∫°o dashboard:', error);
        showLoading(false);
        showNotification('L·ªói khi t·∫£i dashboard', 'error');
    }
}

// T·∫£i danh s√°ch modules s·∫£n xu·∫•t nh√† m√°y 1
async function loadModules() {
    try {
        console.log('üîç B·∫Øt ƒë·∫ßu g·ªçi API modules...');
        
        // ƒê·∫£m b·∫£o c√≥ await
        const response = await fetch('/api/bieu-do/modules/nhamay1');
        
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch modules');
        }
        
        const modules = await response.json();
        console.log('üì¶ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', modules);
        
        renderModules(modules);
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i modules:', error);
        // Fallback data nh∆∞ c≈©
        const fallbackModules = [
            {
                id: 'innm1',
                name: 'B√°o c√°o In',
                description: 'Theo d√µi s·∫£n xu·∫•t in offset',
                icon: 'fas fa-print',
                url: 'Baocaoin.html',
                color: 'module-in'
            },
            {
                id: 'gmcnm1',
                name: 'B√°o c√°o GMC',
                description: 'Theo d√µi c·∫Øt gi·∫•y GMC',
                icon: 'fas fa-cut',
                url: 'Baocaogmc.html',
                color: 'module-gmc'
            }
        ];
        renderModules(fallbackModules);
    }
}

// Render modules ra dashboard
function renderModules(modules) {
    const container = document.getElementById('moduleContainer');
    if (!container) return;
    
    container.innerHTML = modules.map(module => `
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card module-card ${module.color}" onclick="navigateToModule('${module.url}')">
                <div class="card-body">
                    <div class="module-icon">
                        <i class="${module.icon}"></i>
                    </div>
                    <h5>${module.name}</h5>
                    <p>${module.description}</p>
                </div>
            </div>
        </div>
    `).join('');
    
    // Th√™m animation
    setTimeout(() => {
        container.querySelectorAll('.module-card').forEach((card, index) => {
            setTimeout(() => {
                card.classList.add('fade-in');
            }, index * 100);
        });
    }, 100);

    // Ngay ƒë·∫ßu h√†m renderModules()
console.log('üñºÔ∏è Render modules:', modules);
console.log('üéØ Container element:', container);

}

// ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn module
function navigateToModule(url) {
    window.location.href = url;
}

// ====================================================================================================================================
// B√ÅO C√ÅO IN FUNCTIONS
// ====================================================================================================================================

// Kh·ªüi t·∫°o b√°o c√°o In
function initBaoCaoIn() {
    setupInFilters();
    setupInEvents();
    setDefaultDates();
}

// Thi·∫øt l·∫≠p b·ªô l·ªçc b√°o c√°o In
function setupInFilters() {
    loadMachineList();
}

// Thi·∫øt l·∫≠p events cho b√°o c√°o In
function setupInEvents() {
    const btnViewReport = document.getElementById('btnViewReport');
    const btnReset = document.getElementById('btnReset');
    
    if (btnViewReport) {
        btnViewReport.addEventListener('click', handleViewInReport);
    }
    
    if (btnReset) {
        btnReset.addEventListener('click', handleResetFilters);
    }


    const fromDate = document.getElementById('fromDate');
const toDate = document.getElementById('toDate');

if (fromDate) {
    fromDate.addEventListener('focus', function() {
        if (!this.value) {
            const today = new Date().toISOString().split('T')[0];
            this.value = today;
        }
    });
}

if (toDate) {
    toDate.addEventListener('focus', function() {
        if (!this.value) {
            const today = new Date().toISOString().split('T')[0];
            this.value = today;
        }
    });
}


}



async function loadMachineList() {
    try {
        const response = await fetch('/api/machines/list?module_id=innm1');
        if (response.ok) {
            const machines = await response.json();
            const maySelect = document.getElementById('maySelect');
            if (maySelect) {
                maySelect.innerHTML = '<option value="">T·∫•t c·∫£ m√°y</option>';
                machines.forEach(machine => {
                    maySelect.innerHTML += `<option value="${machine.name}">${machine.name}</option>`;
                });
            }
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch m√°y:', error);
    }
}


// Thi·∫øt l·∫≠p ng√†y m·∫∑c ƒë·ªãnh
function setDefaultDates() {
    const today = new Date();
    const todayString = today.toISOString().split('T')[0];
    
    const fromDate = document.getElementById('fromDate');
    const toDate = document.getElementById('toDate');
    
    if (fromDate) {
        fromDate.value = todayString;
    }
    
    if (toDate) {
        toDate.value = todayString;
    }
}

// X·ª≠ l√Ω xem b√°o c√°o In
async function handleViewInReport() {
    try {
        showLoading(true);
        // ƒê·∫£m b·∫£o reportSection lu√¥n c√≥ c·∫•u tr√∫c HTML ƒë√∫ng
ensureReportSectionStructure();
// Reset d·ªØ li·ªáu c≈© v√† UI tr∆∞·ªõc khi l·ªçc m·ªõi
currentChartData = null;
destroyAllCharts();
hideReportSection();
        
        // Thu th·∫≠p ƒëi·ªÅu ki·ªán l·ªçc
        const filters = collectFilters();
        
        // Validate filters
        if (!validateFilters(filters)) {
            showLoading(false);
            return;
        }
        
        // G·ªçi API l·∫•y d·ªØ li·ªáu
        const reportData = await fetchInReportData(filters);
        
        // Hi·ªÉn th·ªã b√°o c√°o
        displayInReport(reportData, filters);
        
        showLoading(false);
        
    } catch (error) {
        console.error('L·ªói khi xem b√°o c√°o In:', error);
        showLoading(false);
        hideReportSection();
        showNotification('L·ªói khi t·∫£i b√°o c√°o: ' + error.message, 'error');
    }
}

// Thu th·∫≠p ƒëi·ªÅu ki·ªán l·ªçc
function collectFilters() {
    return {
        ws: document.getElementById('wsInput')?.value?.trim() || '',
        maca: (() => {
            const caSelect = document.getElementById('caSelect');
            if (!caSelect) return '';
            
            const selectedValue = caSelect.value;
            console.log('üîç Gi√° tr·ªã m√£ ca t·ª´ select:', selectedValue);
            
            // Ch·ªâ return gi√° tr·ªã n·∫øu th·ª±c s·ª± ƒë∆∞·ª£c ch·ªçn (kh√¥ng ph·∫£i "T·∫•t c·∫£ ca")
            if (selectedValue && selectedValue !== '') {
                return selectedValue;
            }
            
            return '';
        })(),
        may: document.getElementById('maySelect')?.value || '',
        tuan: document.getElementById('tuanSelect')?.value || '',
        fromDate: document.getElementById('fromDate')?.value || '',
        toDate: document.getElementById('toDate')?.value || ''
    };
}

// Validate ƒëi·ªÅu ki·ªán l·ªçc
function validateFilters(filters) {
    // B·∫Øt bu·ªôc ph·∫£i c√≥ t·ª´ ng√†y v√† ƒë·∫øn ng√†y
    if (!filters.fromDate || !filters.toDate) {
        showNotification('Vui l√≤ng ch·ªçn t·ª´ ng√†y v√† ƒë·∫øn ng√†y', 'warning');
        return false;
    }
    
    // Ki·ªÉm tra kho·∫£ng th·ªùi gian h·ª£p l·ªá
    const from = new Date(filters.fromDate);
    const to = new Date(filters.toDate);
    
    if (from > to) {
        showNotification('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ng√†y k·∫øt th√∫c', 'warning');
        return false;
    }
    
    return true;
}

// G·ªçi API l·∫•y d·ªØ li·ªáu b√°o c√°o In
async function fetchInReportData(filters) {
    try {
        const params = new URLSearchParams();
        
        if (filters.fromDate) params.append('fromDate', filters.fromDate);
        if (filters.toDate) params.append('toDate', filters.toDate);
        if (filters.ws) params.append('ws', filters.ws);
        if (filters.maca) params.append('ca', filters.maca);
        if (filters.may) params.append('may', filters.may);
        if (filters.tuan) params.append('tuan', filters.tuan);
        
        const response = await fetch(`/api/bieu-do/in/chart-data?${params.toString()}`);
        
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o');
        }
        
        const rawData = await response.json();
        console.log('üì• Raw data t·ª´ API:', rawData);
        
        // X·ª≠ l√Ω d·ªØ li·ªáu th√†nh format ƒë√∫ng
        const processedData = processApiData(rawData);
        console.log('üîÑ Processed data:', processedData);
        
        return processedData;
        
    } catch (error) {
        console.error('L·ªói khi g·ªçi API:', error);
        throw error;
    }
}



// H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API th√†nh format mong mu·ªën
function processApiData(apiData) {
    console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu API:', apiData);
    
    // Tr∆∞·ªùng h·ª£p 1: D·ªØ li·ªáu l√† m·∫£ng c√°c record (nh∆∞ b·∫£ng b·∫°n g·ª≠i)
    if (Array.isArray(apiData)) {
        return processArrayData(apiData);
    }
    
    // Tr∆∞·ªùng h·ª£p 2: D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c group s·∫µn
    if (apiData.totalPaper !== undefined || apiData.shiftData !== undefined) {
        return apiData;
    }
    
    // Tr∆∞·ªùng h·ª£p 3: D·ªØ li·ªáu c√≥ c·∫•u tr√∫c kh√°c
    if (apiData.data && Array.isArray(apiData.data)) {
        return processArrayData(apiData.data);
    }
    
    console.warn('‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c c·∫•u tr√∫c d·ªØ li·ªáu, s·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc');
    return apiData;
}



// X·ª≠ l√Ω d·ªØ li·ªáu d·∫°ng m·∫£ng (m·ªói ph·∫ßn t·ª≠ l√† 1 record)
function processArrayData(records) {
    console.log('üìä X·ª≠ l√Ω m·∫£ng d·ªØ li·ªáu:', records);
    
    // Group theo ca
    const shiftGroups = {};
    let totalPaper = 0;
    let totalWaste = 0;
    
    records.forEach(record => {
        // L·∫•y th√¥ng tin ca - c√≥ th·ªÉ l√† "M√£ ca", "ca", "shift", etc.
        const shift = record['M√£ ca'] || record['ca'] || record['shift'] || record.shift || 'Unknown';
        
        // L·∫•y s·ªë l∆∞·ª£ng - c√≥ th·ªÉ l√† "T·ªïng s·ªë l∆∞·ª£ng", "totalPaper", "so_luong", etc.
        const paper = parseFloat(record['T·ªïng s·ªë l∆∞·ª£ng'] || record['totalPaper'] || record['so_luong'] || record.paper || 0);
        
        // L·∫•y ph·∫ø li·ªáu - c√≥ th·ªÉ l√† "T·ªïng ph·∫ø li·ªáu", "totalWaste", "phe_lieu", etc.
        const waste = parseFloat(record['T·ªïng ph·∫ø li·ªáu'] || record['totalWaste'] || record['phe_lieu'] || record.waste || 0);
        
        console.log(`üìã Record: Ca=${shift}, Paper=${paper}, Waste=${waste}`);
        
        // L·∫•y th√¥ng tin m√°y
const may = record['M√°y'] || record['may'] || record['machine'] || record.may || '';

// T·ªïng h·ª£p theo ca
if (!shiftGroups[shift]) {
    shiftGroups[shift] = { shift, paper: 0, waste: 0, may: may };
}

shiftGroups[shift].paper += paper;
shiftGroups[shift].waste += waste;
// C·∫≠p nh·∫≠t th√¥ng tin m√°y (n·∫øu c√≥ nhi·ªÅu m√°y trong c√πng ca, l·∫•y m√°y cu·ªëi)
if (may) {
    shiftGroups[shift].may = may;
}
        
        // T·ªïng c·ªông
        totalPaper += paper;
        totalWaste += waste;
    });
    
    // Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng
    const shiftData = Object.values(shiftGroups);
    
    console.log('üìà K·∫øt qu·∫£ x·ª≠ l√Ω:', {
        totalPaper,
        totalWaste,
        shiftData,
        shiftCount: shiftData.length
    });
    
    return {
        totalPaper,
        totalWaste,
        shiftData,
        // Th√™m d·ªØ li·ªáu th·ªùi gian m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        timeData: {
            totalTime: 480, // 8 gi·ªù m·∫∑c ƒë·ªãnh
            setupTime: 30,  // 30 ph√∫t canh m√°y m·∫∑c ƒë·ªãnh
            otherTime: 0    // Kh√¥ng c√≥ th·ªùi gian d·ª´ng m√°y
        },
        stopReasons: [] // Kh√¥ng c√≥ l√Ω do d·ª´ng m√°y
    };
}



// Hi·ªÉn th·ªã b√°o c√°o In
function displayInReport(data, filters) {
    console.log('üìã Hi·ªÉn th·ªã b√°o c√°o v·ªõi d·ªØ li·ªáu:', data);
    console.log('üìã V·ªõi filters:', filters);
    console.log('üìã S·ªë ca trong d·ªØ li·ªáu:', data.shiftData ? data.shiftData.length : 0);
    console.log('üìã M√£ ca filter:', filters.maca);
    
    
    // Ki·ªÉm tra d·ªØ li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
if (!data || ((!data.totalPaper || data.totalPaper === 0) && 
(!data.totalWaste || data.totalWaste === 0) && 
(!data.shiftData || data.shiftData.length === 0))) {

// Hi·ªÉn th·ªã section b√°o c√°o v·ªõi th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
const reportSection = document.getElementById('reportSection');
if (reportSection) {
    reportSection.style.display = 'block';
    reportSection.classList.add('slide-up');
}

// Reset t·∫•t c·∫£ displays v·ªÅ 0
displaySummaryStats({ totalPaper: 0, totalWaste: 0 }, filters);
displayProgressBar({ totalPaper: 0, totalWaste: 0 }, filters);

// Hi·ªÉn th·ªã th√¥ng b√°o trong ph·∫ßn ph√¢n t√≠ch
const analysisContainer = document.getElementById('quantityAnalysis');
if (analysisContainer) {
    analysisContainer.innerHTML = `
        <div class="text-center text-muted p-4">
            <i class="fas fa-search fa-3x text-muted mb-4"></i>
            <h4 class="text-muted">Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p</h4>
            <p class="text-muted">Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc ƒë√£ ch·ªçn.</p>
            <p class="text-muted">Vui l√≤ng th·ª≠:</p>
            <ul class="list-unstyled text-muted">
                <li>‚Ä¢ Ki·ªÉm tra l·∫°i m√£ ca ƒë√£ ch·ªçn</li>
                <li>‚Ä¢ Thay ƒë·ªïi kho·∫£ng th·ªùi gian</li>
                <li>‚Ä¢ B·ªè b·ªõt ƒëi·ªÅu ki·ªán l·ªçc</li>
            </ul>
        </div>
    `;
}

// T·∫°o bi·ªÉu ƒë·ªì tr·ªëng
const totalChartCanvas = document.getElementById('quantityChart');
const shiftChartCanvas = document.getElementById('macaChart');
const timeChartCanvas = document.getElementById('timeChart');

if (totalChartCanvas) quantityChart = createEmptyChart(totalChartCanvas, 'Kh√¥ng c√≥ d·ªØ li·ªáu');
if (shiftChartCanvas) macaChart = createEmptyChart(shiftChartCanvas, 'Kh√¥ng c√≥ d·ªØ li·ªáu ca');
if (timeChartCanvas) timeChart = createEmptyChart(timeChartCanvas, 'Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian');

// Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt tr·ªëng
displayDetailTable({ totalPaper: 0, totalWaste: 0, shiftData: [] }, filters);

return;
}

    
    // Hi·ªÉn th·ªã section b√°o c√°o
    const reportSection = document.getElementById('reportSection');
    if (reportSection) {
        reportSection.style.display = 'block';
        reportSection.classList.add('slide-up');
    }
    
    // Hi·ªÉn th·ªã t√≥m t·∫Øt s·ªë li·ªáu
displaySummaryStats(data, filters);

// Hi·ªÉn th·ªã th·ªëng k√™ th·ªùi gian
displayTimeStats(data, filters);
    
    // Hi·ªÉn th·ªã progress bar
    displayProgressBar(data, filters);
    
    // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng s·∫£n xu·∫•t
    displayQuantityCharts(data, filters);
    
    // Hi·ªÉn th·ªã ph√¢n t√≠ch s·∫£n xu·∫•t (b·∫£ng)
    displayQuantityAnalysis(data, filters);;
    
    // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì th·ªùi gian
    displayTimeCharts(data, filters)
    
    // Hi·ªÉn th·ªã ph√¢n t√≠ch th·ªùi gian (l√Ω do d·ª´ng m√°y)
    displayTimeAnalysis(data, filters);

    // Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt
    displayDetailTable(data, filters);
    
    // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
    currentChartData = data;
}




// Hi·ªÉn th·ªã th√¥ng tin b√°o c√°o
function displayReportInfo(data) {
    const customerName = document.getElementById('customerName');
    const productCode = document.getElementById('productCode');
    
    if (customerName) {
        customerName.textContent = data.customer || '-';
    }
    
    if (productCode) {
        productCode.textContent = data.product || '-';
    }
}

// Hi·ªÉn th·ªã ƒëi·ªÅu ki·ªán l·ªçc
function displayFilterInfo(filters) {
    const filterInfo = document.getElementById('filterInfo');
    if (!filterInfo) return;
    
    const filterItems = [];
    
    if (filters.ws) filterItems.push(`<strong>WS:</strong> ${filters.ws}`);
    if (filters.maca) filterItems.push(`<strong>Ca:</strong> ${filters.maca}`);
    if (filters.may) filterItems.push(`<strong>M√°y:</strong> ${filters.may}`);
    // if (filters.tuan) filterItems.push(`<strong>Tu·∫ßn:</strong> ${filters.tuan}`);
    if (filters.fromDate && filters.toDate) {
        filterItems.push(`<strong>Th·ªùi gian:</strong> ${formatDate(filters.fromDate)} - ${formatDate(filters.toDate)}`);
    }
    
    if (filterItems.length === 0) {
        filterItems.push('<em>Kh√¥ng c√≥ ƒëi·ªÅu ki·ªán l·ªçc</em>');
    }
    
    filterInfo.innerHTML = filterItems.join('<br>');
}

// Hi·ªÉn th·ªã t√≥m t·∫Øt s·ªë li·ªáu
function displaySummaryStats(data, filters) {
    // Ki·ªÉm tra d·ªØ li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
    if (!data || (data.totalPaper === 0 && data.totalWaste === 0)) {
        const totalPaper = document.getElementById('totalPaper');
        const totalWaste = document.getElementById('totalWaste');
        const totalData = document.getElementById('totalData');
        
        if (totalPaper) totalPaper.textContent = '0';
        if (totalWaste) totalWaste.textContent = '0';
        if (totalData) totalData.textContent = '0';
        return;
    }

    // N·∫øu l·ªçc theo m√£ ca c·ª• th·ªÉ, ch·ªâ hi·ªÉn th·ªã s·ªë li·ªáu c·ªßa ca ƒë√≥
    let displayPaper = data.totalPaper || 0;
let displayWaste = data.totalWaste || 0;

if (filters && filters.maca && data.shiftData) {
    const shiftData = data.shiftData.find(shift => shift.shift === filters.maca);
    if (shiftData) {
        displayPaper = shiftData.paper || 0;
        displayWaste = shiftData.waste || 0;
    } else {
        // Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ ca n√†y - reset v·ªÅ 0
        displayPaper = 0;
        displayWaste = 0;
    }
}

    const totalPaper = document.getElementById('totalPaper');
    const totalWaste = document.getElementById('totalWaste');
    const totalData = document.getElementById('totalData');
    
    if (totalPaper) {
        totalPaper.textContent = formatNumber(displayPaper);
    }
    
    if (totalWaste) {
        totalWaste.textContent = formatNumber(displayWaste);
    }
    
    if (totalData) {
        totalData.textContent = formatNumber(displayPaper + displayWaste);
    }
}



// Hi·ªÉn th·ªã th·ªëng k√™ th·ªùi gian
function displayTimeStats(data, filters) {
    // T√≠nh th·ªùi gian d·ª´ng m√°y
    const stopTime = data.stopReasons ? 
        data.stopReasons.reduce((sum, reason) => sum + (reason.duration || 0), 0) : 0;
    
    // T√≠nh th·ªùi gian l√†m vi·ªác = Tg k·∫øt th√∫c - tg b·∫Øt ƒë·∫ßu - tg d·ª´ng m√°y
const totalWorkTime = data.timeData?.totalTime || 0;
const setupTime = data.timeData?.setupTime || 0;
const workTime = Math.max(0, totalWorkTime - setupTime - stopTime);

// T·ªïng th·ªùi gian = th·ªùi gian l√†m vi·ªác + th·ªùi gian d·ª´ng m√°y + th·ªùi gian canh m√°y
const totalTime = workTime + stopTime + setupTime;
    
    // L·ªçc theo m√£ ca n·∫øu c√≥
    let displayWorkTime = workTime;
    let displayStopTime = stopTime;
    let displayTotalTime = totalTime;
    
    if (filters && filters.maca && data.shiftData) {
        const shiftData = data.shiftData.find(shift => shift.shift === filters.maca);
        if (shiftData) {
            const totalPaper = data.totalPaper || 0;
            const totalWaste = data.totalWaste || 0;
            const grandTotal = totalPaper + totalWaste;
            const shiftTotal = (shiftData.paper || 0) + (shiftData.waste || 0);
            
            if (grandTotal > 0) {
                const ratio = shiftTotal / grandTotal;
                displayWorkTime = Math.round(workTime * ratio);
                displayStopTime = Math.round(stopTime * ratio);
                const displaySetupTime = Math.round(setupTime * ratio);
                displayTotalTime = displayWorkTime + displayStopTime + displaySetupTime;
            }
        }
    }
    
    // C·∫≠p nh·∫≠t display
    const totalTimeEl = document.getElementById('totalTimeDisplay');
    const workTimeEl = document.getElementById('workTimeDisplay');
    const stopTimeEl = document.getElementById('stopTimeDisplay');
    
    if (totalTimeEl) totalTimeEl.textContent = formatDuration(displayTotalTime);
    if (workTimeEl) workTimeEl.textContent = formatDuration(displayWorkTime);
    if (stopTimeEl) stopTimeEl.textContent = formatDuration(displayStopTime);
    
    // C·∫≠p nh·∫≠t progress bar th·ªùi gian
    displayTimeProgressBar(displayWorkTime, displayStopTime, displayTotalTime);
}

// Hi·ªÉn th·ªã progress bar th·ªùi gian
// Hi·ªÉn th·ªã progress bar th·ªùi gian
function displayTimeProgressBar(workTime, stopTime, totalTime) {
    // T√≠nh t·ªïng cho thanh ti·∫øn ƒë·ªô = ch·ªâ g·ªìm th·ªùi gian l√†m vi·ªác + th·ªùi gian d·ª´ng m√°y
    const progressTotal = workTime + stopTime;
    
    if (progressTotal === 0) {
        const workProgress = document.getElementById('workTimeProgress');
        const stopProgress = document.getElementById('stopTimeProgress');
        const workPercentSpan = document.getElementById('workTimePercent');
        const stopPercentSpan = document.getElementById('stopTimePercent');
        
        if (workProgress) workProgress.style.width = '0%';
        if (stopProgress) stopProgress.style.width = '0%';
        if (workPercentSpan) workPercentSpan.textContent = '0%';
        if (stopPercentSpan) stopPercentSpan.textContent = '0%';
        return;
    }
    
    const workPercent = (workTime / progressTotal) * 100;
    const stopPercent = (stopTime / progressTotal) * 100;
    
    const workProgress = document.getElementById('workTimeProgress');
    const stopProgress = document.getElementById('stopTimeProgress');
    const workPercentSpan = document.getElementById('workTimePercent');
    const stopPercentSpan = document.getElementById('stopTimePercent');
    
    if (workProgress) {
        workProgress.style.width = workPercent + '%';
        workProgress.setAttribute('aria-valuenow', workPercent);
    }
    
    if (stopProgress) {
        stopProgress.style.width = stopPercent + '%';
        stopProgress.setAttribute('aria-valuenow', stopPercent);
    }
    
    if (workPercentSpan) {
        workPercentSpan.textContent = workPercent.toFixed(1) + '%';
    }
    
    if (stopPercentSpan) {
        stopPercentSpan.textContent = stopPercent.toFixed(1) + '%';
    }
}




// Hi·ªÉn th·ªã progress bar
function displayProgressBar(data, filters) {
    // N·∫øu l·ªçc theo m√£ ca c·ª• th·ªÉ, ch·ªâ t√≠nh t·ªïng c·ªßa ca ƒë√≥
let totalPaper = data.totalPaper || 0;
let totalWaste = data.totalWaste || 0;

if (filters && filters.maca && data.shiftData) {
    const shiftData = data.shiftData.find(shift => shift.shift === filters.maca);
    if (shiftData) {
        totalPaper = shiftData.paper || 0;
        totalWaste = shiftData.waste || 0;
    }
}

const total = totalPaper + totalWaste;
    
    if (total === 0) {
        // Reset progress bar v·ªÅ 0
        const paperProgress = document.getElementById('paperProgress');
        const wasteProgress = document.getElementById('wasteProgress');
        const paperPercentSpan = document.getElementById('paperPercent');
        const wastePercentSpan = document.getElementById('wastePercent');
        
        if (paperProgress) paperProgress.style.width = '0%';
        if (wasteProgress) wasteProgress.style.width = '0%';
        if (paperPercentSpan) paperPercentSpan.textContent = '0%';
        if (wastePercentSpan) wastePercentSpan.textContent = '0%';
        return;
    }
    
    if (total === 0) return;
    
    const paperPercent = (totalPaper / total) * 100;
const wastePercent = (totalWaste / total) * 100;
    
    const paperProgress = document.getElementById('paperProgress');
    const wasteProgress = document.getElementById('wasteProgress');
    const paperPercentSpan = document.getElementById('paperPercent');
    const wastePercentSpan = document.getElementById('wastePercent');
    
    if (paperProgress) {
        paperProgress.style.width = paperPercent + '%';
        paperProgress.setAttribute('aria-valuenow', paperPercent);
    }
    
    if (wasteProgress) {
        wasteProgress.style.width = wastePercent + '%';
        wasteProgress.setAttribute('aria-valuenow', wastePercent);
    }
    
    if (paperPercentSpan) {
        paperPercentSpan.textContent = paperPercent.toFixed(1) + '%';
    }
    
    if (wastePercentSpan) {
        wastePercentSpan.textContent = wastePercent.toFixed(1) + '%';
    }
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n
function displayPieChart(data) {
    // Destroy chart c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
    if (pieChart) {
        pieChart.destroy();
        pieChart = null;
    }
    
    const ctx = document.getElementById('pieChart');
    if (!ctx) return;
    
    pieChart = new Chart(ctx, {
        type: 'pie',
        data: chartData,
        options: {
            responsive: true,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percent = ((context.parsed / total) * 100).toFixed(1);
                            return `${context.label}: ${formatNumber(context.parsed)} (${percent}%)`;
                        }
                    }
                }
            }
        }
    });
}




function displayQuantityCharts(data, filters) {
    console.log('üéØ Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng s·∫£n xu·∫•t v·ªõi filters:', filters);
    
    // Destroy chart c≈©
    if (quantityChart) {
        quantityChart.destroy();
        quantityChart = null;
    }
    if (macaChart) {
        macaChart.destroy();
        macaChart = null;
    }
    
    // L·∫•y 2 canvas c√≥ s·∫µn
    const totalChartCanvas = document.getElementById('quantityChart');
    const shiftChartCanvas = document.getElementById('macaChart');
    
    if (!totalChartCanvas || !shiftChartCanvas) {
        console.error('Kh√¥ng t√¨m th·∫•y canvas bi·ªÉu ƒë·ªì');
        return;
    }
    
    // X√°c ƒë·ªãnh logic hi·ªÉn th·ªã
    const hasSpecificMacaFilter = (filters.maca && filters.maca.trim() !== '');
    
    console.log('üîç Ki·ªÉm tra filter m√£ ca:', hasSpecificMacaFilter, 'Gi√° tr·ªã m√£ ca:', filters.maca);
    console.log('üîç S·ªë ca trong d·ªØ li·ªáu:', data.shiftData ? data.shiftData.length : 0);
    
    // Lu√¥n hi·ªÉn th·ªã c·∫£ 2 container
const totalContainer = totalChartCanvas.closest('.col-md-6');
const shiftContainer = shiftChartCanvas.closest('.col-md-6');

if (totalContainer) totalContainer.style.display = 'block';
if (shiftContainer) shiftContainer.style.display = 'block';

// T·∫°o bi·ªÉu ƒë·ªì t·ªïng
quantityChart = createTotalQuantityChartOnCanvas(totalChartCanvas, data);

// T·∫°o bi·ªÉu ƒë·ªì t·ª´ng ca
if (data.shiftData && data.shiftData.length > 0) {
    console.log('üìä C√≥', data.shiftData.length, 'ca - hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ª´ng ca');
    
    // N·∫øu l·ªçc m√£ ca c·ª• th·ªÉ, ch·ªâ hi·ªÉn th·ªã ca ƒë√≥
    const displayShiftData = hasSpecificMacaFilter ? 
        data.shiftData.filter(shift => shift.shift === filters.maca) : 
        data.shiftData;
    
    if (displayShiftData.length > 0) {
        createMultipleShiftCharts(shiftChartCanvas, displayShiftData);
    } else {
        macaChart = createEmptyChart(shiftChartCanvas, `Kh√¥ng c√≥ d·ªØ li·ªáu ca ${filters.maca}`);
    }
} else {
        // Ng∆∞·ªùi d√πng KH√îNG ch·ªçn m√£ ca c·ª• th·ªÉ - hi·ªÉn th·ªã t·ªïng + t·ª´ng ca
        console.log('üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ªïng + t·ª´ng ca');
        
        // Hi·ªÉn th·ªã c·∫£ 2 container
        const totalContainer = totalChartCanvas.closest('.col-md-6');
        const shiftContainer = shiftChartCanvas.closest('.col-md-6');
        
        if (totalContainer) totalContainer.style.display = 'block';
        if (shiftContainer) shiftContainer.style.display = 'block';
        
        // T·∫°o bi·ªÉu ƒë·ªì t·ªïng
        quantityChart = createTotalQuantityChartOnCanvas(totalChartCanvas, data);
        
        // T·∫°o bi·ªÉu ƒë·ªì t·ª´ng ca
        if (data.shiftData && data.shiftData.length > 0) {
            console.log('üìä C√≥', data.shiftData.length, 'ca - hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ª´ng ca');
            createMultipleShiftCharts(shiftChartCanvas, data.shiftData);
        } else {
            console.log('üìä Kh√¥ng c√≥ d·ªØ li·ªáu ca');
            macaChart = createEmptyChart(shiftChartCanvas, 'Kh√¥ng c√≥ d·ªØ li·ªáu ca');
        }
    }
}






function displayNoDataChart(canvas, message) {
    // T√¨m card-body ch·ª©a canvas
    const cardBody = canvas.closest('.card-body');
    if (!cardBody) return;
    
    // Thay th·∫ø n·ªôi dung card-body
    cardBody.innerHTML = `
        <div class="text-center text-muted p-4">
            <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
            <h5>${message}</h5>
            <p>Vui l√≤ng ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán l·ªçc.</p>
        </div>
    `;
}


// T·∫°o bi·ªÉu ƒë·ªì t·ªïng tr√™n canvas c√≥ s·∫µn
function createTotalQuantityChartOnCanvas(canvas, data) {
    const totalPaper = data.totalPaper || 0;
    const totalWaste = data.totalWaste || 0;
    
    console.log('üéØ T·∫°o bi·ªÉu ƒë·ªì t·ªïng v·ªõi d·ªØ li·ªáu:', {totalPaper, totalWaste});
    console.log('üéØ Canvas element:', canvas);
    console.log('üéØ Canvas ID:', canvas.id);
    console.log('üéØ Canvas parent:', canvas.parentElement);
    
    try {
        return new Chart(canvas, {
            type: 'pie',
            data: {
                labels: ['Th√†nh ph·∫©m', 'Ph·∫ø li·ªáu'],
                datasets: [{
                    data: [totalPaper, totalWaste],
                    backgroundColor: [
                        'rgb(174,207,188)',
                        'rgb(248,179,181)'
                    ],
                    borderColor: [
                        'rgb(148, 199, 169)',
                        'rgb(255, 141, 152)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                elements: {
                    arc: {
                        hoverOffset: 0
                    }
                },
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'T·ªïng s·∫£n xu·∫•t',
                        font: {
                            size: 16,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percent = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                                return `${context.label}: ${formatNumber(context.parsed)} (${percent}%)`;
                            }
                        }
                    },
                    datalabels: {
                        display: true,
                        color: 'white',
                        font: {
                            size: 14,
                            weight: 'bold'
                        },
                        formatter: function(value, context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                            return percent + '%';
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì t·ªïng:', error);
        return null;
    }
}



// T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n cho c√°c ca tr√™n canvas c√≥ s·∫µn
function createMultipleShiftCharts(canvas, shiftData) {
    // Gi·ªØ nguy√™n canvas g·ªëc, ch·ªâ thay ƒë·ªïi n·ªôi dung card-body ch·ª©a n√≥
    const cardBody = canvas.closest('.card-body');
    if (!cardBody) return;
    
    // ·∫®n canvas g·ªëc
    canvas.style.display = 'none';
    
    // T·∫°o container m·ªõi cho multiple charts
    const existingMultiContainer = cardBody.querySelector('.multi-shift-charts');
    if (existingMultiContainer) {
        existingMultiContainer.remove();
    }
    
    const multiContainer = document.createElement('div');
    multiContainer.className = 'multi-shift-charts';
    
    let html = '<div class="row justify-content-center">';
    
    shiftData.forEach((shift, index) => {
        const canvasId = `shiftChart_${index}`;
        const colClass = shiftData.length <= 2 ? 'col-md-6' : 'col-md-4';
        
        html += `
            <div class="${colClass} mb-3">
                <div class="text-center">
                    <h6 class="mb-2">Ca ${shift.shift}</h6>
                    <div style="height: 200px; position: relative;">
                        <canvas id="${canvasId}"></canvas>
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    
    multiContainer.innerHTML = html;
    cardBody.appendChild(multiContainer);
    
    // T·∫°o bi·ªÉu ƒë·ªì cho t·ª´ng ca
    shiftData.forEach((shift, index) => {
        const canvasId = `shiftChart_${index}`;
        const canvasElement = document.getElementById(canvasId);
        
        if (canvasElement) {
            createSingleShiftPieChart(canvasElement, shift);
        }
    });
}



function createSingleShiftPieChart(canvas, shiftData) {
    const paper = shiftData.paper || 0;
    const waste = shiftData.waste || 0;
    const total = paper + waste;
    
    if (total === 0) {
        // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
        const container = canvas.parentElement;
        container.innerHTML = `
            <div class="text-center text-muted p-2">
                <i class="fas fa-exclamation-triangle"></i>
                <small>Kh√¥ng c√≥ d·ªØ li·ªáu</small>
            </div>
        `;
        return;
    }
    
    new Chart(canvas, {
        type: 'pie',
        data: {
            labels: ['Th√†nh ph·∫©m', 'Ph·∫ø li·ªáu'],
            datasets: [{
                data: [paper, waste],
                backgroundColor: [
                    'rgb(174,207,188)',
                    'rgb(248,179,181)'
                ],
                borderColor: [
                    'rgb(148, 199, 169)',
                    'rgb(255, 141, 152)'
                ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 10,
                        usePointStyle: true,
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const percent = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                            return `${context.label}: ${formatNumber(context.parsed)} (${percent}%)`;
                        }
                    }
                },
                datalabels: {
                    display: true,
                    color: 'white',
                    font: {
                        size: 12,
                        weight: 'bold'
                    },
                    formatter: function(value, context) {
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                        return percent + '%';
                    }
                }
            }
        }
    });
}


// T·∫°o bi·ªÉu ƒë·ªì cho m·ªôt ca c·ª• th·ªÉ tr√™n canvas c√≥ s·∫µn
function createSingleShiftChartOnCanvas(canvas, data, shiftName) {
    return new Chart(canvas, {
        type: 'pie',
        data: {
            labels: ['Th√†nh ph·∫©m', 'Ph·∫ø li·ªáu'],
            datasets: [{
                data: [data.totalPaper || 0, data.totalWaste || 0],
                backgroundColor: [
                        'rgb(174,207,188)',
                        'rgb(248,179,181)'
                    ],
                    borderColor: [
                        'rgb(148, 199, 169)',
                        'rgb(255, 141, 152)'
                    ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: `S·∫£n xu·∫•t ca ${shiftName}`,
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                },
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        usePointStyle: true
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percent = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                            return `${context.label}: ${formatNumber(context.parsed)} (${percent}%)`;
                        }
                    }
                },
                datalabels: {
                    display: true,
                    color: 'white',
                    font: {
                        size: 14,
                        weight: 'bold'
                    },
                    formatter: function(value, context) {
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                        return percent + '%';
                    }
                }
            }
        }
    });
}


// C·∫≠p nh·∫≠t h√†m hi·ªÉn th·ªã ph√¢n t√≠ch s·∫£n xu·∫•t
function displayQuantityAnalysis(data, filters) {
    const analysisContainer = document.getElementById('quantityAnalysis');
    if (!analysisContainer) return;
    
    console.log('üìä Hi·ªÉn th·ªã ph√¢n t√≠ch v·ªõi d·ªØ li·ªáu:', data);
    
    let html = '';
    
    if (data.shiftData && data.shiftData.length > 0) {
    // L·ªçc d·ªØ li·ªáu theo m√£ ca n·∫øu c√≥
    const displayData = filters && filters.maca ? 
        data.shiftData.filter(shift => shift.shift === filters.maca) : 
        data.shiftData;
    
    if (displayData.length === 0) {
        html = `
            <div class="text-center text-muted p-4">
                <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
                <h5>Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ ca ${filters.maca}</h5>
                <p>Vui l√≤ng ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán l·ªçc.</p>
            </div>
        `;
    } else {
        html += `
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>M√£ Ca</th>
                            <th>M√°y</th>
                            <th class="text-end">T·ªïng</th>
                            <th class="text-end">Th√†nh ph·∫©m</th>
                            <th class="text-end">Ph·∫ø li·ªáu</th>
                            <th class="text-end">T·ª∑ l·ªá TP</th>
                            <th class="text-end">T·ª∑ l·ªá PL</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        displayData.forEach(shift => {
            const paper = shift.paper || 0;
            const waste = shift.waste || 0;
            const total = paper + waste;
            const paperRate = total > 0 ? ((paper / total) * 100).toFixed(1) : 0;
            const wasteRate = total > 0 ? ((waste / total) * 100).toFixed(1) : 0;
            
            html += `
                <tr>
                    <td><strong>Ca ${shift.shift}</strong></td>
                    <td><span class="badge" style="background-color: rgb(128, 186, 151); color: white;">${shift.may || 'T·∫•t c·∫£'}</span></td>
                    <td class="text-end"><strong>${formatNumber(total)}</strong></td>
                    <td class="text-end text-success"><strong>${formatNumber(paper)}</strong></td>
                    <td class="text-end text-danger"><strong>${formatNumber(waste)}</strong></td>
                    <td class="text-end">
                        <span class="badge" style="background-color: rgb(128, 186, 151); color: white;">
                            ${paperRate}%
                        </span>
                    </td>
                    <td class="text-end">
                        <span class="badge" style="background-color: rgb(128, 186, 151); color: white;">
                            ${wasteRate}%
                        </span>
                    </td>
                </tr>
            `;
        });
        
        html += `
                    </tbody>
                </table>
            </div>
        `;
        
        // Th·ªëng k√™ ch·ªâ cho d·ªØ li·ªáu ƒë∆∞·ª£c hi·ªÉn th·ªã
        const totalPaper = displayData.reduce((sum, shift) => sum + (shift.paper || 0), 0);
        const totalWaste = displayData.reduce((sum, shift) => sum + (shift.waste || 0), 0);
        const grandTotal = totalPaper + totalWaste;
        const totalPaperRate = grandTotal > 0 ? ((totalPaper / grandTotal) * 100).toFixed(1) : 0;
        const totalWasteRate = grandTotal > 0 ? ((totalWaste / grandTotal) * 100).toFixed(1) : 0;
        
        html += `
            <div class="row mt-3">
                <div class="col-md-4">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6>${filters && filters.maca ? `S·ªë ca ƒë∆∞·ª£c l·ªçc` : `S·ªë ca s·∫£n xu·∫•t`}</h6>
                            <h4 class="text-primary">${displayData.length}</h4>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6>T·ª∑ l·ªá th√†nh ph·∫©m</h6>
                            <h4 class="text-success">${totalPaperRate}%</h4>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6>T·ª∑ l·ªá ph·∫ø li·ªáu</h6>
                            <h4 class="text-danger">${totalWasteRate}%</h4>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
} else {
    html = `
        <div class="text-center text-muted p-4">
            <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
            <h5>Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc</h5>
            <p>Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ca ho·∫∑c kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.</p>
        </div>
    `;
}
    
    analysisContainer.innerHTML = html;
}




// Th√™m h√†m hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr·ªëng
// T·∫°o bi·ªÉu ƒë·ªì tr·ªëng
function createEmptyChart(canvas, message) {
    return new Chart(canvas, {
        type: 'pie',
        data: {
            labels: ['Kh√¥ng c√≥ d·ªØ li·ªáu'],
            datasets: [{
                data: [1],
                backgroundColor: ['rgba(108, 117, 125, 0.5)'],
                borderColor: ['rgba(108, 117, 125, 1)'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: message || 'Kh√¥ng c√≥ d·ªØ li·ªáu',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                },
                legend: {
                    display: false
                },
                tooltip: {
                    enabled: false
                },
                datalabels: {
                    display: false
                }
            }
        }
    });
}



// Th√™m h√†m displayTimeCharts() sau h√†m displayQuantityCharts():
function displayTimeCharts(data, filters) {
    // Destroy chart c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
    if (timeChart) {
        timeChart.destroy();
        timeChart = null;
    }
    
    const timeCtx = document.getElementById('timeChart');
    if (!timeCtx) return;
    
// T√≠nh to√°n th·ªùi gian - n·∫øu l·ªçc theo m√£ ca th√¨ t√≠nh theo t·ª∑ l·ªá
let totalTime = data.timeData?.totalTime || 0;
let setupTime = data.timeData?.setupTime || 0;
let otherTime = data.timeData?.otherTime || 0;

if (filters && filters.maca && data.shiftData) {
    const shiftData = data.shiftData.find(shift => shift.shift === filters.maca);
    if (shiftData) {
        // T√≠nh t·ª∑ l·ªá th·ªùi gian theo t·ª∑ l·ªá s·∫£n xu·∫•t
        const totalPaper = data.totalPaper || 0;
        const totalWaste = data.totalWaste || 0;
        const grandTotal = totalPaper + totalWaste;
        const shiftTotal = (shiftData.paper || 0) + (shiftData.waste || 0);
        
        if (grandTotal > 0) {
            const ratio = shiftTotal / grandTotal;
            totalTime = Math.round(totalTime * ratio);
            setupTime = Math.round(setupTime * ratio);
            otherTime = Math.round(otherTime * ratio);
        }
    }
}

// Th·ªùi gian ch·∫°y m√°y = t·ªïng th·ªùi gian - th·ªùi gian canh m√°y - th·ªùi gian d·ª´ng m√°y
const runTime = Math.max(0, totalTime - setupTime - otherTime);
    
    console.log('‚è∞ D·ªØ li·ªáu th·ªùi gian:', { runTime, setupTime, otherTime, totalTime });
    
    timeChart = new Chart(timeCtx, {
        type: 'pie',
        data: {
            labels: ['Th·ªùi gian ch·∫°y m√°y', 'Th·ªùi gian canh m√°y', 'Kh√°c'],
            datasets: [{
                data: [runTime, setupTime, otherTime],
                backgroundColor: [
                    'rgb(167,190,211)',    // Xanh l√° - ch·∫°y m√°y
                    'rgb(218,184,148)',    // V√†ng - canh m√°y  
                    'rgb(240,128,128)'     // ƒê·ªè - kh√°c
                ],
                borderColor: [
                    'rgb(144, 169, 192)',    // Xanh l√° - ch·∫°y m√°y
                    'rgb(196, 162, 126)',    // V√†ng - canh m√°y  
                    'rgb(199, 105, 105)'     // ƒê·ªè - kh√°c
                ],
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        usePointStyle: true
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percent = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                            return `${context.label}: ${formatDuration(context.parsed)} (${percent}%)`;
                        }
                    }
                },
                datalabels: {
                    display: true,
                    color: 'white',
                    font: {
                        size: 14,
                        weight: 'bold'
                    },
                    formatter: function(value, context) {
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                        return percent + '%';
                    }
                }
            }
        }
    });
    
    // T·∫°o bi·ªÉu ƒë·ªì l√Ω do d·ª´ng m√°y
displayStopReasonChart(data, filters);

// C·∫≠p nh·∫≠t th√¥ng tin th·ªùi gian ·ªü b√™n ph√¢n t√≠ch
updateTimeAnalysisInfo(data.timeData);
}



// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì l√Ω do d·ª´ng m√°y
function displayStopReasonChart(data, filters) {
    // Destroy chart c≈©
    if (stopReasonChart) {
        stopReasonChart.destroy();
        stopReasonChart = null;
    }
    
    const stopReasonCtx = document.getElementById('stopReasonChart');
    if (!stopReasonCtx) return;
    
    // Ki·ªÉm tra c√≥ d·ªØ li·ªáu l√Ω do d·ª´ng m√°y kh√¥ng
    if (!data.stopReasons || data.stopReasons.length === 0) {
        stopReasonChart = createEmptyChart(stopReasonCtx, 'Kh√¥ng c√≥ l√Ω do d·ª´ng m√°y');
        return;
    }
    
    // L·ªçc d·ªØ li·ªáu theo m√£ ca n·∫øu c√≥
    let displayStopReasons = data.stopReasons;
    if (filters && filters.maca && data.shiftData) {
        const shiftData = data.shiftData.find(shift => shift.shift === filters.maca);
        if (shiftData) {
            // T√≠nh t·ª∑ l·ªá cho ca c·ª• th·ªÉ
            const totalPaper = data.totalPaper || 0;
            const totalWaste = data.totalWaste || 0;
            const grandTotal = totalPaper + totalWaste;
            const shiftTotal = (shiftData.paper || 0) + (shiftData.waste || 0);
            
            if (grandTotal > 0) {
                const ratio = shiftTotal / grandTotal;
                displayStopReasons = data.stopReasons.map(reason => ({
                    reason: reason.reason,
                    duration: Math.round(reason.duration * ratio)
                })).filter(reason => reason.duration > 0);
            }
        }
    }
    
    if (displayStopReasons.length === 0) {
        stopReasonChart = createEmptyChart(stopReasonCtx, 'Kh√¥ng c√≥ l√Ω do d·ª´ng m√°y');
        return;
    }
    
    const labels = displayStopReasons.map(item => item.reason);
    const durations = displayStopReasons.map(item => item.duration);
    
    // T·∫°o m√†u s·∫Øc cho t·ª´ng l√Ω do
    const colors = [
        'rgb(148, 185, 219)',  // xanh d∆∞∆°ng pastel
        'rgb(229, 148, 148)',  // ƒë·ªè pastel
        'rgb(150, 208, 162)',  // xanh l√° pastel
'rgb(179, 154, 228)',  // t√≠m pastel
'rgb(224, 219, 152)',  // v√†ng pastel
'rgb(205, 170, 125)',  // n√¢u pastel
'rgb(223, 178, 133)',  // cam pastel
'rgb(174, 171, 171)',  // x√°m pastel
'rgb(130, 174, 174)',  // xanh ƒë·∫≠m pastel (teal nh·∫π)
'rgb(214, 153, 162)',  // h·ªìng pastel
'rgb(141, 150, 193)',  // xanh t√≠m than nh·∫°t (ƒë·∫≠m ƒë·∫±m)
    ];
    
    stopReasonChart = new Chart(stopReasonCtx, {
        type: 'pie',
        data: {
            labels: labels,
            datasets: [{
                data: durations,
                backgroundColor: colors.slice(0, labels.length),
                borderColor: colors.slice(0, labels.length).map(color => color.replace('0.8', '1')),
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            elements: {
                arc: {
                    hoverOffset: 0
                }
            },
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        usePointStyle: true
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percent = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                            return `${context.label}: ${formatDuration(context.parsed)} (${percent}%)`;
                        }
                    }
                },
                datalabels: {
                    display: true,
                    color: 'white',
                    font: {
                        size: 12,
                        weight: 'bold'
                    },
                    formatter: function(value, context) {
                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                        const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                        return percent + '%';
                    }
                }
            }
        }
    });
}



// C·∫≠p nh·∫≠t th√¥ng tin th·ªùi gian
function updateTimeAnalysisInfo(timeData) {
    const runTimeEl = document.getElementById('runTime');
    const setupTimeEl = document.getElementById('setupTime');
    const otherTimeEl = document.getElementById('otherTime');
    const totalTimeEl = document.getElementById('totalTime');
    
    if (timeData) {
        const setupTime = timeData.setupTime || 0;
        const otherTime = timeData.otherTime || 0;
        const totalTime = timeData.totalTime || 0;
        const runTime = Math.max(0, totalTime - setupTime - otherTime);
        
        if (runTimeEl) runTimeEl.textContent = formatDuration(runTime);
        if (setupTimeEl) setupTimeEl.textContent = formatDuration(setupTime);
        if (otherTimeEl) otherTimeEl.textContent = formatDuration(otherTime);
        if (totalTimeEl) totalTimeEl.textContent = formatDuration(totalTime);
    }
}


// Hi·ªÉn th·ªã ph√¢n t√≠ch th·ªùi gian
function displayTimeAnalysis(data, filters) {
    const stopReasonsEl = document.getElementById('stopReasonsAnalysis');
    if (!stopReasonsEl) return;
    
    let html = '';
    
    // Ch·ªâ hi·ªÉn th·ªã khi c√≥ l√Ω do d·ª´ng m√°y (th·ªùi gian kh√°c > 0)
    if (data.timeData && data.timeData.otherTime > 0 && data.stopReasons && data.stopReasons.length > 0) {
        html += `
            <div class="mt-3">
                <h6><i class="fas fa-exclamation-triangle text-warning me-2"></i>Chi ti·∫øt th·ªùi gian d·ª´ng m√°y:</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead class="table-light">
                            <tr>
                                <th>L√Ω do</th>
                                <th class="text-end">Th·ªùi gian</th>
                                <th class="text-end">T·ª∑ l·ªá</th>
                            </tr>
                        </thead>
                        <tbody>
        `;
        
        const totalStopTime = data.stopReasons.reduce((sum, reason) => sum + (reason.duration || 0), 0);
        
        data.stopReasons.forEach(reason => {
            const duration = reason.duration || 0;
            const percent = totalStopTime > 0 ? ((duration / totalStopTime) * 100).toFixed(1) : 0;
            
            html += `
                <tr>
                    <td>${reason.reason}</td>
                    <td class="text-end">${formatDuration(duration)}</td>
                    <td class="text-end">
                        <span class="badge bg-secondary">${percent}%</span>
                    </td>
                </tr>
            `;
        });
        
        html += `
                        </tbody>
                    </table>
                </div>
                <div class="mt-2 text-center">
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        T·ªïng th·ªùi gian d·ª´ng m√°y: <strong>${formatDuration(totalStopTime)}</strong>
                    </small>
                </div>
            </div>
        `;
    } else {
        html = `
            <div class="text-center text-success mt-3">
                <i class="fas fa-check-circle me-2"></i>
                Kh√¥ng c√≥ th·ªùi gian d·ª´ng m√°y
            </div>
        `;
    }
    
    stopReasonsEl.innerHTML = html;
}

// Reset filters
function handleResetFilters() {
    // Reset form
    document.getElementById('wsInput').value = '';
    document.getElementById('caSelect').selectedIndex = 0;
    document.getElementById('maySelect').selectedIndex = 0;
    
    // Reset dates
    setDefaultDates();

    // Reset th√™m c√°c tr∆∞·ªùng kh√°c
const wsInput = document.getElementById('wsInput');
const caSelect = document.getElementById('caSelect');
const maySelect = document.getElementById('maySelect');

if (wsInput) wsInput.value = '';
if (caSelect) caSelect.selectedIndex = 0;
if (maySelect) maySelect.selectedIndex = 0;
    
    // ·∫®n b√°o c√°o
    const reportSection = document.getElementById('reportSection');
    if (reportSection) {
        reportSection.style.display = 'none';
    }
    
    // H·ªßy bi·ªÉu ƒë·ªì
    if (pieChart) {
        pieChart.destroy();
        pieChart = null;
    }
    if (quantityChart) {
        quantityChart.destroy();
        quantityChart = null;
    }
    if (macaChart) {
        macaChart.destroy();
        macaChart = null;
    }
    if (timeChart) {
        timeChart.destroy();
        timeChart = null;
    }
    
    showNotification('ƒê√£ reset b·ªô l·ªçc', 'info');
}

// ====================================================================================================================================
// B√ÅO C√ÅO GMC FUNCTIONS (t∆∞∆°ng t·ª± In)
// ====================================================================================================================================

// Kh·ªüi t·∫°o b√°o c√°o GMC
function initBaoCaoGMC() {
    // T∆∞∆°ng t·ª± nh∆∞ initBaoCaoIn nh∆∞ng d√†nh cho GMC
    console.log('Kh·ªüi t·∫°o b√°o c√°o GMC...');
}

// ====================================================================================================================================
// UTILITY FUNCTIONS
// ====================================================================================================================================

// Hi·ªÉn th·ªã loading
function showLoading(show) {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        overlay.style.display = show ? 'flex' : 'none';
    }
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = 'info') {
    // T·∫°o toast notification
    const toast = document.createElement('div');
    toast.className = `alert alert-${getBootstrapClass(type)} alert-dismissible fade show position-fixed`;
    toast.style.cssText = `
        top: 20px;
        right: 20px;
        z-index: 10000;
        min-width: 300px;
        max-width: 500px;
    `;
    
    toast.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(toast);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
        }
    }, 5000);
}

// Chuy·ªÉn ƒë·ªïi type th√†nh class Bootstrap
function getBootstrapClass(type) {
    switch (type) {
        case 'success': return 'success';
        case 'error': return 'danger';
        case 'warning': return 'warning';
        case 'info': return 'info';
        default: return 'info';
    }
}

// Format s·ªë
function formatNumber(num) {
    if (!num || isNaN(num)) return '0';
    return parseFloat(num).toLocaleString('vi-VN');
}

// Format ng√†y
function formatDate(dateString) {
    if (!dateString) return '';
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN');
    } catch (error) {
        return dateString;
    }
}

// Format th·ªùi gian (ph√∫t -> gi·ªù ph√∫t)
function formatDuration(minutes) {
    if (!minutes || isNaN(minutes)) return '0 ph√∫t';
    
    const totalMinutes = parseInt(minutes);
    const hours = Math.floor(totalMinutes / 60);
    const mins = totalMinutes % 60;
    
    if (hours === 0) {
        return `${mins} ph√∫t`;
    } else if (mins === 0) {
        return `${hours} gi·ªù`;
    } else {
        return `${hours} gi·ªù ${mins} ph√∫t`;
    }
}

console.log('‚úÖ H·ªá th·ªëng bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n t·∫•t');




// H√†m helper ƒë·ªÉ destroy t·∫•t c·∫£ chart
function destroyAllCharts() {
    console.log('üóëÔ∏è Destroy t·∫•t c·∫£ bi·ªÉu ƒë·ªì');
    
    if (pieChart) {
        pieChart.destroy();
        pieChart = null;
    }
    if (quantityChart) {
        quantityChart.destroy();
        quantityChart = null;
    }
    if (macaChart) {
        macaChart.destroy();
        macaChart = null;
    }
    if (timeChart) {
        timeChart.destroy();
        timeChart = null;
    }
    if (stopReasonChart) {
        stopReasonChart.destroy();
        stopReasonChart = null;
    }
    
    // Destroy t·∫•t c·∫£ chart con ƒë∆∞·ª£c t·∫°o ƒë·ªông
    Chart.helpers.each(Chart.instances, function(instance) {
        if (instance.canvas && instance.canvas.id && instance.canvas.id.startsWith('shiftChart_')) {
            instance.destroy();
        }
    });


    // X√≥a container multiple charts
document.querySelectorAll('.multi-shift-charts').forEach(container => {
    container.remove();
});

// Hi·ªÉn th·ªã l·∫°i canvas g·ªëc
document.querySelectorAll('#macaChart').forEach(canvas => {
    canvas.style.display = 'block';
});
}



// ·∫®n section b√°o c√°o
function hideReportSection() {
    const reportSection = document.getElementById('reportSection');
    if (reportSection) {
        reportSection.style.display = 'none';
    }
}



// ƒê·∫£m b·∫£o c·∫•u tr√∫c HTML c·ªßa reportSection
function ensureReportSectionStructure() {
    const reportSection = document.getElementById('reportSection');
    if (!reportSection) return;
    
    // Ki·ªÉm tra xem c√≥ ƒë·ªß c√°c element c·∫ßn thi·∫øt kh√¥ng
    const requiredElements = [
        'totalPaper', 'totalWaste', 'totalData',
        'quantityChart', 'macaChart', 'timeChart',
        'quantityAnalysis', 'detailTableContainer'
    ];
    
    let needsReset = false;
    requiredElements.forEach(id => {
        if (!document.getElementById(id)) {
            needsReset = true;
        }
    });
    
    // N·∫øu thi·∫øu element, reload l·∫°i trang
    if (needsReset) {
        location.reload();
    }
}



// Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt b√°o c√°o
function displayDetailTable(data, filters) {
    const container = document.getElementById('detailTableContainer');
    if (!container) return;
    
    // G·ªçi API l·∫•y d·ªØ li·ªáu b√°o c√°o In theo filters
fetchInReportList(filters)
.then(detailData => {
    // L·ªçc d·ªØ li·ªáu theo m√£ ca n·∫øu c√≥
    let filteredData = detailData;
    if (filters && filters.maca) {
        filteredData = detailData.filter(record => record.ma_ca === filters.maca);
    }
    renderDetailTable(container, filteredData, filters);
})
.catch(error => {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu chi ti·∫øt:', error);
    container.innerHTML = `
        <div class="text-center text-muted p-4">
            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
            <h6>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt</h6>
            <p>L·ªói: ${error.message}</p>
        </div>
    `;
});
}


// L·∫•y d·ªØ li·ªáu chi ti·∫øt t·ª´ API
async function fetchDetailTableData(filters) {
    try {
        const params = new URLSearchParams();
        
        if (filters.fromDate) params.append('fromDate', filters.fromDate);
        if (filters.toDate) params.append('toDate', filters.toDate);
        if (filters.ws) params.append('ws', filters.ws);
        if (filters.maca) params.append('ca', filters.maca);
        if (filters.may) params.append('may', filters.may);
        if (filters.tuan) params.append('tuan', filters.tuan);
        
        // Th√™m tham s·ªë ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt
        params.append('detail', 'true');
        
        const response = await fetch(`/api/bao-cao-in/list?${params.toString()}`);
        
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt');
        }
        
        return await response.json();
        
    } catch (error) {
        console.error('L·ªói khi g·ªçi API chi ti·∫øt:', error);
        throw error;
    }
}




// L·∫•y d·ªØ li·ªáu b√°o c√°o In theo filters
async function fetchInReportList(filters) {
    try {
        const params = new URLSearchParams();
        
        if (filters.fromDate) params.append('fromDate', filters.fromDate);
        if (filters.toDate) params.append('toDate', filters.toDate);
        if (filters.ws) params.append('ws', filters.ws);
        if (filters.maca) params.append('ca', filters.maca);
        if (filters.may) params.append('may', filters.may);
        if (filters.tuan) params.append('tuan', filters.tuan);
        
        const response = await fetch(`/api/bieu-do/in/chart-data?${params.toString()}&detail=true`);
        
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o In');
        }
        
        const result = await response.json();
        return result.reports || [];
        
    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o In:', error);
        throw error;
    }
}




// Render b·∫£ng chi ti·∫øt
function renderDetailTable(container, data, filters) {
    if (!data || data.length === 0) {
        const noDataMessage = filters && filters.maca ? 
            `Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt cho m√£ ca ${filters.maca}` : 
            'Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt';
        container.innerHTML = `
            <div class="text-center text-muted p-4">
                <i class="fas fa-table fa-2x mb-3"></i>
                <h6>${noDataMessage}</h6>
                <p>Vui l√≤ng ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán l·ªçc.</p>
            </div>
        `;
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover text-center">
                <thead class="table-dark">
                    <tr>
                        <th>STT</th>
                        <th>WS</th>
                        <th>M√£ Ca</th>
                        <th>M√°y</th>
                        <th>Kh√°ch h√†ng</th>
                        <th>M√£ s·∫£n ph·∫©m</th>
                        <th class="text-end">Th√†nh ph·∫©m in</th>
                        <th class="text-end">Ph·∫ø li·ªáu</th>
                        <th>Th·ªùi gian</th>
                        <th class="text-end">Th·ªùi gian canh m√°y</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    data.forEach((record, index) => {
        const ws = record.ws || '-';
        const maca = record.ma_ca || '-';
        const may = record.may || '-';
        const customer = record.khach_hang || '-';
        const product = record.ma_sp || '-';
        const paper = formatNumber(record.thanh_pham_in || 0);
        const waste = formatNumber((parseFloat(record.phe_lieu) || 0) + (parseFloat(record.phe_lieu_trang) || 0));
        const setupTime = formatDuration(record.thoi_gian_canh_may || 0);
        
        // Format th·ªùi gian
        const timeRange = formatTimeRange(record.thoi_gian_bat_dau, record.thoi_gian_ket_thuc);
        
        html += `
            <tr>
                <td><strong>${index + 1}</strong></td>
                <td><span class="badge bg-primary">${ws}</span></td>
                <td><span class="badge " style="background-color: rgb(128, 186, 151); color: white;">${maca}</span></td>
                <td><span class="badge " style="background-color: rgb(208, 160, 145); color: white;">${may}</span></td>
                <td>${customer}</td>
                <td>${product}</td>
                <td class="text-end text-success"><strong>${paper}</strong></td>
                <td class="text-end text-danger"><strong>${waste}</strong></td>
                <td><small>${timeRange}</small></td>
                <td class="text-end">${setupTime}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
    `;
    
    // Th√™m th·ªëng k√™ t·ªïng
    const totalPaper = data.reduce((sum, record) => sum + (parseFloat(record.thanh_pham_in) || 0), 0);
    const totalWaste = data.reduce((sum, record) => 
        sum + (parseFloat(record.phe_lieu) || 0) + (parseFloat(record.phe_lieu_trang) || 0), 0);
    const totalSetupTime = data.reduce((sum, record) => sum + (parseFloat(record.thoi_gian_canh_may) || 0), 0);

// ƒê·∫øm s·ªë WS kh√¥ng tr√πng l·∫∑p
const uniqueWS = new Set(data.map(record => record.ws).filter(ws => ws && ws !== '-')).size;

// T√≠nh t·ªïng th·ªùi gian d·ª´ng m√°y t·ª´ currentChartData
const totalStopTime = currentChartData && currentChartData.stopReasons ? 
    currentChartData.stopReasons.reduce((sum, reason) => sum + (reason.duration || 0), 0) : 0;

    
html += `
<div class="row mt-3">
    <div class="col-md-2">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6>T·ªïng b√°o c√°o</h6>
                <h4 class="text-primary">${uniqueWS}</h4>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6>T·ªïng th√†nh ph·∫©m</h6>
                <h4 class="text-success">${formatNumber(totalPaper)}</h4>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6>T·ªïng ph·∫ø li·ªáu</h6>
                <h4 class="text-danger">${formatNumber(totalWaste)}</h4>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6>T·ªïng th·ªùi gian canh m√°y</h6>
                <h4 class="text-warning">${formatDuration(totalSetupTime)}</h4>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-light">
            <div class="card-body text-center">
                <h6>T·ªïng th·ªùi gian d·ª´ng m√°y</h6>
                <h4 class="text-info">${formatDuration(totalStopTime)}</h4>
            </div>
        </div>
    </div>
</div>
`;
    
    container.innerHTML = html;
}

// Format kho·∫£ng th·ªùi gian
function formatTimeRange(startTime, endTime) {
    if (!startTime || !endTime) return '-';
    
    try {
        const start = new Date(startTime);
        const end = new Date(endTime);
        
        const startFormatted = formatDateTime(start);
        const endFormatted = formatDateTime(end);
        
        return `${startFormatted} - ${endFormatted}`;
    } catch (error) {
        return '-';
    }
}

// Format ng√†y gi·ªù (dd/mm hh:mm:ss)
function formatDateTime(date) {
    if (!date) return '-';
    
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const seconds = date.getSeconds().toString().padStart(2, '0');
    
    return `${day}/${month} ${hours}:${minutes}:${seconds}`;
}